!function(e,o){if("object"==typeof exports&&"object"==typeof module)module.exports=o(require("blockly/core"));else if("function"==typeof define&&define.amd)define(["blockly/core"],o);else{var n="object"==typeof exports?o(require("blockly/core")):o(e.Blockly);for(var t in n)("object"==typeof exports?exports:e)[t]=n[t]}}(this,(function(e){return function(e){var o={};function n(t){if(o[t])return o[t].exports;var r=o[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=o,n.d=function(e,o,t){n.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,o){if(1&o&&(e=n(e)),8&o)return e;if(4&o&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&o&&"string"!=typeof e)for(var r in e)n.d(t,r,function(o){return e[o]}.bind(null,r));return t},n.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(o,"a",o),o},n.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},n.p="/dist/",n(n.s=1)}([function(o,n){o.exports=e},function(e,o,n){"use strict";n.r(o),n.d(o,"FieldGridDropdown",(function(){return i}));var t=n(0),r=n.n(t);
/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
class i extends r.a.FieldDropdown{constructor(e,o,n){super(e,o,n),this.columns_=3,n&&n.columns&&this.setColumnsInternal_(n.columns)}static fromJson(e){return new i(e.options,void 0,e)}setColumns(e){this.setColumnsInternal_(e),this.updateColumnsStyling_()}setColumnsInternal_(e){e=parseInt(e),!isNaN(e)&&e>=1&&(this.columns_=e)}showEditor_(e){super.showEditor_(e);const o=this.sourceBlock_.isShadow()?this.sourceBlock_.getParent().getColour():this.sourceBlock_.getColour(),n=this.sourceBlock_.isShadow()?this.sourceBlock_.getParent().style.colourTertiary:this.sourceBlock_.style.colourTertiary;r.a.DropDownDiv.setColour(o,n),r.a.utils.dom.addClass(this.menu_.getElement(),"fieldGridDropDownContainer"),this.updateColumnsStyling_(),r.a.DropDownDiv.showPositionedByField(this,this.dropdownDispose_.bind(this))}updateColumnsStyling_(){const e=this.menu_?this.menu_.getElement():null;e&&(e.style.gridTemplateColumns=`repeat(${this.columns_}, min-content)`)}}r.a.fieldRegistry.register("field_grid_dropdown",i),r.a.Css.register(["/** Setup grid layout of DropDown */\n  .fieldGridDropDownContainer.blocklyMenu {\n      display: grid;\n      grid-gap: 7px;\n    }\n  /* Change look of cells (add border, sizing, padding, and text color) */\n  .fieldGridDropDownContainer.blocklyMenu .blocklyMenuItem {\n    border: 1px solid rgba(1, 1, 1, 0.5);\n    border-radius: 4px;\n    color: white;\n    min-width: auto;\n    padding-left: 15px; /* override padding-left now that checkmark is hidden */\n  }\n  /* Change look of selected cell */\n  .fieldGridDropDownContainer .blocklyMenuItem .blocklyMenuItemCheckbox {\n    display: none; /* Hide checkmark */\n  }\n  .fieldGridDropDownContainer .blocklyMenuItem.blocklyMenuItemSelected {\n    background-color: rgba(1, 1, 1, 0.25);\n  }\n  /* Change look of focus/highlighted cell */\n  .fieldGridDropDownContainer .blocklyMenuItem.blocklyMenuItemHighlight {\n    box-shadow: 0 0 0 4px hsla(0, 0%, 100%, .2);\n  }\n  .fieldGridDropDownContainer .blocklyMenuItemHighlight {\n    /* Uses less selectors so as to not affect blocklyMenuItemSelected */\n    background-color: inherit;\n  }\n  .fieldGridDropDownContainer {\n    margin: 7px; /* needed for highlight */\n  }"])}])}));
//# sourceMappingURL=index.js.map