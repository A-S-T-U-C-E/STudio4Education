{"version":3,"file":"index.js","mappings":";CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,EAAQG,QAAQ,sBAC7B,GAAqB,mBAAXC,QAAyBA,OAAOC,IAC9CD,OAAO,CAAC,gBAAiBJ,OACrB,CACJ,IAAIM,EAAuB,iBAAZL,QAAuBD,EAAQG,QAAQ,iBAAmBH,EAAQD,EAAc,SAC/F,IAAI,IAAIQ,KAAKD,GAAuB,iBAAZL,QAAuBA,QAAUF,GAAMQ,GAAKD,EAAEC,IAPxE,CASGC,MAAOC,qCCTVP,EAAOD,QAAUQ,ICCbC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaZ,QAGrB,IAAIC,EAASQ,EAAyBE,GAAY,CAGjDX,QAAS,IAOV,OAHAc,EAAoBH,GAAUV,EAAQA,EAAOD,QAASU,GAG/CT,EAAOD,QCpBfU,EAAoBK,EAAKd,IACxB,IAAIe,EAASf,GAAUA,EAAOgB,WAC7B,IAAOhB,EAAiB,QACxB,IAAM,EAEP,OADAS,EAAoBQ,EAAEF,EAAQ,CAAEX,EAAGW,IAC5BA,GCLRN,EAAoBQ,EAAI,CAAClB,EAASmB,KACjC,IAAI,IAAIC,KAAOD,EACXT,EAAoBW,EAAEF,EAAYC,KAASV,EAAoBW,EAAErB,EAASoB,IAC5EE,OAAOC,eAAevB,EAASoB,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EV,EAAoBW,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFjB,EAAoBqB,EAAK/B,IACH,oBAAXgC,QAA0BA,OAAOC,aAC1CX,OAAOC,eAAevB,EAASgC,OAAOC,YAAa,CAAEC,MAAO,WAE7DZ,OAAOC,eAAevB,EAAS,aAAc,CAAEkC,OAAO,oPCehD,IAAMC,EAAb,uKAIE,WACE,IAAMC,EACFC,EAAAA,oBAAAA,SAAAA,QAA6C,gBACjD9B,KAAK+B,kBAAoBF,EAAgBG,eACzCH,EAAgBG,eACZ,SAA2DC,GACzD,IAAMC,EAAQD,EAAMC,MACpB,OAAKA,EAAMC,YAAcD,EAAME,UAAUC,QAAQC,SAC7CJ,EAAMK,aACJL,EAAMM,wBAA0BC,EAASP,GACpC,WAEF,UAEF,YAlBjB,qBA2BE,WAEMJ,EAAAA,oBAAAA,SAAAA,QAA6C,gBACjCE,eAAiBhC,KAAK+B,2FA9B1C,KA0CA,SAASU,EAASP,GAGhB,IAAMQ,EAA0CR,EAAMS,YACtD,SAAID,IAAUD,EAASC,OAGfA,IACDR,EAAMU,mBAAoBV,EAAMW","sources":["webpack://@blockly/disable-top-blocks/webpack/universalModuleDefinition","webpack://@blockly/disable-top-blocks/external umd {\"root\":\"Blockly\",\"commonjs\":\"blockly/core\",\"commonjs2\":\"blockly/core\",\"amd\":\"blockly/core\"}","webpack://@blockly/disable-top-blocks/webpack/bootstrap","webpack://@blockly/disable-top-blocks/webpack/runtime/compat get default export","webpack://@blockly/disable-top-blocks/webpack/runtime/define property getters","webpack://@blockly/disable-top-blocks/webpack/runtime/hasOwnProperty shorthand","webpack://@blockly/disable-top-blocks/webpack/runtime/make namespace object","webpack://@blockly/disable-top-blocks/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"blockly/core\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"blockly/core\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"blockly/core\")) : factory(root[\"Blockly\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, (__WEBPACK_EXTERNAL_MODULE__573__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__573__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * @fileoverview Plugin for changing the context menu to match the\n * `disableOrphans` event handler.\n */\n\nimport * as Blockly from 'blockly/core';\n\n/**\n * This plugin changes the logic of the enable/disable context menu item. It is\n * enabled for all blocks except top-level blocks that have output or\n * previous connections. In other words, the option is disabled for orphan\n * blocks. Using this plugin allows users to disable valid non-orphan blocks,\n * but not re-enable blocks that have been automatically disabled by\n * `disableOrphans`.\n */\nexport class DisableTopBlocks {\n  /**\n   * Modifies the context menu 'disable' option as described above.\n   */\n  init() {\n    const disableMenuItem =\n        Blockly.ContextMenuRegistry.registry.getItem('blockDisable');\n    this.oldPreconditionFn = disableMenuItem.preconditionFn;\n    disableMenuItem.preconditionFn =\n        function(/** @type {!Blockly.ContextMenuRegistry.Scope} */ scope) {\n          const block = scope.block;\n          if (!block.isInFlyout && block.workspace.options.disable &&\n              block.isEditable()) {\n            if (block.getInheritedDisabled() || isOrphan(block)) {\n              return 'disabled';\n            }\n            return 'enabled';\n          }\n          return 'hidden';\n        };\n  }\n\n  /**\n   * Turn off the effects of this plugin and restore the initial behavior.\n   * This is never required to be called. It is optional in case you need to\n   * disable the plugin.\n   */\n  dispose() {\n    const disableMenuItem =\n        Blockly.ContextMenuRegistry.registry.getItem('blockDisable');\n    disableMenuItem.preconditionFn = this.oldPreconditionFn;\n  }\n}\n\n/**\n * A block is an orphan if its parent is an orphan, or if it doesn't have a\n * parent but it does have a previous or output connection (so it expects to be\n * attached to something). This means all children of orphan blocks are also\n * orphans and cannot be manually re-enabled.\n * @param {!Blockly.BlockSvg} block Block to check.\n * @return {boolean} Whether the block is an orphan.\n */\nfunction isOrphan(block) {\n  // If the parent is an orphan block, this block should also be considered\n  // an orphan so it cannot be manually re-enabled.\n  const parent = /** @type {Blockly.BlockSvg} */ (block.getParent());\n  if (parent && isOrphan(parent)) {\n    return true;\n  }\n  return !parent &&\n      !!(block.outputConnection || block.previousConnection);\n}\n"],"names":["root","factory","exports","module","require","define","amd","a","i","this","__WEBPACK_EXTERNAL_MODULE__573__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","DisableTopBlocks","disableMenuItem","Blockly","oldPreconditionFn","preconditionFn","scope","block","isInFlyout","workspace","options","disable","isEditable","getInheritedDisabled","isOrphan","parent","getParent","outputConnection","previousConnection"],"sourceRoot":""}