{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@blockly/plugin-cross-tab-copy-paste/webpack/universalModuleDefinition","webpack://@blockly/plugin-cross-tab-copy-paste/external umd {\"root\":\"Blockly\",\"commonjs\":\"blockly/core\",\"commonjs2\":\"blockly/core\",\"amd\":\"blockly/core\"}","webpack://@blockly/plugin-cross-tab-copy-paste/webpack/bootstrap","webpack://@blockly/plugin-cross-tab-copy-paste/webpack/runtime/define property getters","webpack://@blockly/plugin-cross-tab-copy-paste/webpack/runtime/hasOwnProperty shorthand","webpack://@blockly/plugin-cross-tab-copy-paste/webpack/runtime/make namespace object","webpack://@blockly/plugin-cross-tab-copy-paste/./src/utility.js","webpack://@blockly/plugin-cross-tab-copy-paste/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"blockly/core\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"blockly/core\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"blockly/core\")) : factory(root[\"Blockly\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, (__WEBPACK_EXTERNAL_MODULE__573__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__573__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as Blockly from 'blockly/core';\n/**\n * Convert block to save info.\n * @param {Blockly.Block} block The block you want to convert.\n * @return {{saveInfo:?Blockly.serialization.blocks,\n * typeCounts:?Object}} The serialized block and type information.\n */\nexport function convertBlockToSaveInfo(block) {\n  return {\n    saveInfo: Blockly.serialization.blocks.save(\n        block, {addCoordinates: true, addNextBlocks: false}),\n    typeCounts: Blockly.common.getBlockTypeCounts(block, true),\n  };\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as Blockly from 'blockly/core';\nimport {convertBlockToSaveInfo} from './utility';\n\n\n/**\n * A Blockly plugin that adds context menu items and keyboard shortcuts\n * to allow users to copy and paste a block between tabs.\n */\nexport class CrossTabCopyPaste {\n  /**\n   * Initializes the cross tab copy paste plugin. If no options are selected\n   * then both context menu items and keyboard shortcuts are added.\n   * @param {{contextMenu: boolean, shortcut: boolean}} options\n   * `contextMenu` Register copy and paste in the context menu.\n   * `shortcut` Register cut (ctr + x), copy (ctr + c) and paste (ctr + v)\n   * in the shortcut.\n   */\n  init({\n    contextMenu = true,\n    shortcut = true,\n  } = {\n    contextMenu: true,\n    shortcut: true,\n  }) {\n    if (contextMenu) {\n      // Register the menus\n      this.blockCopyToStorageContextMenu();\n      this.blockPasteFromStorageContextMenu();\n    }\n\n    if (shortcut) {\n      // Unregister the default KeyboardShortcuts\n      Blockly.ShortcutRegistry.registry.unregister(\n          Blockly.ShortcutItems.names.COPY);\n      Blockly.ShortcutRegistry.registry.unregister(\n          Blockly.ShortcutItems.names.CUT);\n      Blockly.ShortcutRegistry.registry.unregister(\n          Blockly.ShortcutItems.names.PASTE);\n      // Register the KeyboardShortcuts\n      this.blockCopyToStorageShortcut();\n      this.blockCutToStorageShortcut();\n      this.blockPasteFromStorageShortcut();\n    }\n  }\n\n  /**\n   * Adds a copy command to the block context menu.\n   */\n  blockCopyToStorageContextMenu() {\n    /** @type {!Blockly.ContextMenuRegistry.RegistryItem} */\n    const copyToStorageOption = {\n      displayText: function() {\n        if (Blockly.Msg['CROSS_TAB_COPY']) {\n          return Blockly.Msg['CROSS_TAB_COPY'];\n        }\n        return 'Copy';\n      },\n      preconditionFn: function(\n          /** @type {!Blockly.ContextMenuRegistry.Scope} */ scope) {\n        return 'enabled';\n      },\n      callback: function(\n          /** @type {!Blockly.ContextMenuRegistry.Scope} */ scope) {\n        const blockText = JSON.stringify(\n            convertBlockToSaveInfo(scope.block));\n        localStorage.setItem('blocklyStash', blockText);\n      },\n      scopeType: Blockly.ContextMenuRegistry.ScopeType.BLOCK,\n      id: 'blockCopyToStorage',\n      weight: 0,\n    };\n    Blockly.ContextMenuRegistry.registry.register(copyToStorageOption);\n  }\n\n  /**\n   * Adds a paste command to the block context menu.\n   */\n  blockPasteFromStorageContextMenu() {\n    /** @type {!Blockly.ContextMenuRegistry.RegistryItem} */\n    const pasteFromStorageOption = {\n      displayText: function() {\n        if (Blockly.Msg['CROSS_TAB_PASTE']) {\n          return Blockly.Msg['CROSS_TAB_PASTE'];\n        }\n        return 'Paste';\n      },\n      preconditionFn: function(\n          /** @type {!Blockly.ContextMenuRegistry.Scope} */ scope) {\n        const copyData = JSON.parse(localStorage.getItem('blocklyStash'));\n        if (copyData &&\n          scope.workspace.isCapacityAvailable(copyData.typeCounts)) {\n          return 'enabled';\n        }\n        return 'disabled';\n      },\n      callback: function(\n          /** @type {!Blockly.ContextMenuRegistry.Scope} */ scope) {\n        const blockText = localStorage.getItem('blocklyStash');\n        const saveInfo = JSON.parse(blockText);\n        scope.workspace.paste(saveInfo['saveInfo']);\n      },\n      scopeType: Blockly.ContextMenuRegistry.ScopeType.WORKSPACE,\n      id: 'blockPasteFromStorage',\n      weight: 0,\n    };\n    Blockly.ContextMenuRegistry.registry.register(pasteFromStorageOption);\n  }\n\n  /**\n   * Adds a keyboard shortcut that will store copy information for a block\n   * in localStorage.\n   */\n  blockCopyToStorageShortcut() {\n    /** @type {!Blockly.ShortcutRegistry.KeyboardShortcut} */\n    const copyShortcut = {\n      name: 'copy',\n      preconditionFn: function(workspace) {\n        return !workspace.options.readOnly &&\n          !Blockly.Gesture.inProgress() &&\n          Blockly.selected &&\n          Blockly.selected.isDeletable() &&\n          Blockly.selected.isMovable();\n      },\n      callback: function(workspace, e) {\n        // Prevent the default copy behavior,\n        // which may beep or otherwise indicate\n        // an error due to the lack of a selection.\n        e.preventDefault();\n        workspace.hideChaff();\n        const blockText = JSON.stringify(\n            convertBlockToSaveInfo(Blockly.selected));\n        localStorage.setItem('blocklyStash', blockText);\n        return true;\n      },\n    };\n    Blockly.ShortcutRegistry.registry.register(copyShortcut);\n\n    const ctrlC = Blockly.ShortcutRegistry.registry.createSerializedKey(\n        Blockly.utils.KeyCodes.C, [Blockly.utils.KeyCodes.CTRL]);\n    Blockly.ShortcutRegistry.registry.addKeyMapping(ctrlC, copyShortcut.name);\n\n    const altC =\n      Blockly.ShortcutRegistry.registry.createSerializedKey(\n          Blockly.utils.KeyCodes.C, [Blockly.utils.KeyCodes.ALT]);\n    Blockly.ShortcutRegistry.registry.addKeyMapping(altC, copyShortcut.name);\n\n    const metaC = Blockly.ShortcutRegistry.registry.createSerializedKey(\n        Blockly.utils.KeyCodes.C, [Blockly.utils.KeyCodes.META]);\n    Blockly.ShortcutRegistry.registry.addKeyMapping(metaC, copyShortcut.name);\n  }\n\n  /**\n   * Adds a keyboard shortcut that will store copy information for a block\n   * in local storage and delete the block.\n   */\n  blockCutToStorageShortcut() {\n    /** @type {!Blockly.ShortcutRegistry.KeyboardShortcut} */\n    const cutShortcut = {\n      name: 'cut',\n      preconditionFn: function(workspace) {\n        return !workspace.options.readOnly &&\n          !Blockly.Gesture.inProgress() &&\n          Blockly.selected &&\n          Blockly.selected.isDeletable() &&\n          Blockly.selected.isMovable() &&\n          !Blockly.selected.workspace.isFlyout;\n      },\n      callback: function(workspace, e) {\n        // Prevent the default copy behavior,\n        // which may beep or otherwise indicate\n        // an error due to the lack of a selection.\n        e.preventDefault();\n        const blockText = JSON.stringify(\n            convertBlockToSaveInfo(Blockly.selected));\n        localStorage.setItem('blocklyStash', blockText);\n        Blockly.Events.setGroup(true);\n        Blockly.selected.dispose(true);\n        Blockly.Events.setGroup(false);\n        return true;\n      },\n    };\n    Blockly.ShortcutRegistry.registry.register(cutShortcut);\n\n    const ctrlX = Blockly.ShortcutRegistry.registry.createSerializedKey(\n        Blockly.utils.KeyCodes.X, [Blockly.utils.KeyCodes.CTRL]);\n    Blockly.ShortcutRegistry.registry.addKeyMapping(ctrlX, cutShortcut.name);\n\n    const altX = Blockly.ShortcutRegistry.registry.createSerializedKey(\n        Blockly.utils.KeyCodes.X, [Blockly.utils.KeyCodes.ALT]);\n    Blockly.ShortcutRegistry.registry.addKeyMapping(altX, cutShortcut.name);\n\n    const metaX = Blockly.ShortcutRegistry.registry.createSerializedKey(\n        Blockly.utils.KeyCodes.X, [Blockly.utils.KeyCodes.META]);\n    Blockly.ShortcutRegistry.registry.addKeyMapping(metaX, cutShortcut.name);\n  }\n\n  /**\n   * Adds a keyboard shortcut that will paste the block stored in localStorage.\n   */\n  blockPasteFromStorageShortcut() {\n    /** @type {!Blockly.ShortcutRegistry.KeyboardShortcut} */\n    const pasteShortcut = {\n      name: 'paste',\n      preconditionFn: function(workspace) {\n        if (workspace.options.readOnly || Blockly.Gesture.inProgress()) {\n          return false;\n        }\n        const copyData = JSON.parse(localStorage.getItem('blocklyStash'));\n        if (!copyData || !workspace.isCapacityAvailable(copyData.typeCounts)) {\n          return false;\n        }\n        return true;\n      },\n      callback: function(workspace, e) {\n        // Prevent the default copy behavior,\n        // which may beep or otherwise indicate\n        // an error due to the lack of a selection.\n        e.preventDefault();\n        const blockText = localStorage.getItem('blocklyStash');\n        const saveInfo = JSON.parse(blockText);\n        workspace.paste(saveInfo['saveInfo']);\n        return true;\n      },\n    };\n    Blockly.ShortcutRegistry.registry.register(pasteShortcut);\n\n    const ctrlV = Blockly.ShortcutRegistry.registry.createSerializedKey(\n        Blockly.utils.KeyCodes.V, [Blockly.utils.KeyCodes.CTRL]);\n    Blockly.ShortcutRegistry.registry.addKeyMapping(ctrlV, pasteShortcut.name);\n\n    const altV =\n      Blockly.ShortcutRegistry.registry.createSerializedKey(\n          Blockly.utils.KeyCodes.V, [Blockly.utils.KeyCodes.ALT]);\n    Blockly.ShortcutRegistry.registry.addKeyMapping(altV, pasteShortcut.name);\n\n    const metaV = Blockly.ShortcutRegistry.registry.createSerializedKey(\n        Blockly.utils.KeyCodes.V, [Blockly.utils.KeyCodes.META]);\n    Blockly.ShortcutRegistry.registry.addKeyMapping(metaV, pasteShortcut.name);\n  }\n}\n"],"names":["root","factory","exports","module","require","define","amd","a","i","this","__WEBPACK_EXTERNAL_MODULE__573__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","convertBlockToSaveInfo","block","saveInfo","Blockly","addCoordinates","addNextBlocks","typeCounts","CrossTabCopyPaste","contextMenu","shortcut","blockCopyToStorageContextMenu","blockPasteFromStorageContextMenu","blockCopyToStorageShortcut","blockCutToStorageShortcut","blockPasteFromStorageShortcut","copyToStorageOption","displayText","preconditionFn","scope","callback","blockText","JSON","stringify","localStorage","setItem","scopeType","id","weight","pasteFromStorageOption","copyData","parse","getItem","workspace","isCapacityAvailable","paste","copyShortcut","name","options","readOnly","e","preventDefault","hideChaff","ctrlC","altC","metaC","cutShortcut","ctrlX","altX","metaX","pasteShortcut","ctrlV","altV","metaV"],"sourceRoot":""}