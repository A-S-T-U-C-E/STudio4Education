/**
 * @license
 * Copyright 2020 Sébastien CANET
 * SPDX-License-Identifier: BSD-3-Clause
 */

/**
 * @fileoverview Basics serial command blocks for Blockly.
 * @author scanet@libreduc.cc (Sébastien Canet)
 */

'use strict';

//To support syntax defined in http://arduino.cc/en/Reference/HomePage

goog.provide('Blockly.Constants.board_serial');

goog.require('Blockly.Blocks');
goog.require('Blockly');

var mediaFolder = "./S4E/media/";

Blockly.Blocks['BOARD_SERIAL_INIT'] = {
    init: function() {
        this.setInputsInline(true);
        this.appendDummyInput("")
            .appendField(Blockly.Msg.SERIAL_INIT)
            .appendField(new Blockly.FieldDropdown(profile.default.serial), "SPEED");
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg.SERIAL_PRINT_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.SERIAL_PRINT_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['BOARD_SERIAL_PRINTFOR'] = {
    init: function() {
        this.setInputsInline(true);
        this.appendValueInput("CONTENT")
            .setCheck('Number')
            .appendField(Blockly.Msg.SERIAL_PRINT_FORMAT)
            .appendField(new Blockly.FieldDropdown([
                [Blockly.Msg.SERIAL_PRINT_FORDECIMAL, "DEC"],
                [Blockly.Msg.SERIAL_PRINT_FORHEXA, "HEX"],
                [Blockly.Msg.SERIAL_PRINT_FORBIN, "BIN"],
                [Blockly.Msg.SERIAL_PRINT_FOROCT, "OCT"]
            ]), "TYPE");
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg.SERIAL_PRINT_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.SERIAL_PRINT_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['BOARD_SERIAL_PRINT'] = {
    init: function() {
        this.appendValueInput("CONTENT")
            .appendField(Blockly.Msg.SERIAL_PRINT_CONTENT);
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg.SERIAL_PRINT_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.SERIAL_PRINT_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['BOARD_SERIAL_AVAILABLE'] = {
    init: function() {
        this.appendDummyInput("")
            .appendField(Blockly.Msg.SERIAL_AVAILABLE);
        this.setInputsInline(true);
        this.setOutput(true, "Number");
        this.setTooltip(Blockly.Msg.SERIAL_PRINT_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.SERIAL_PRINT_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['BOARD_SERIAL_READ'] = {
    init: function() {
        this.appendDummyInput("")
            .appendField(Blockly.Msg.SERIAL_READ);
        this.setInputsInline(true);
        this.setOutput(true, "Number");
        this.setTooltip(Blockly.Msg.SERIAL_PRINT_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.SERIAL_PRINT_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['BOARD_SERIAL_READSTRINGUNTIL'] = {
    init: function() {
        this.appendValueInput("CONTENT")
            .setCheck('String')
            .appendField(Blockly.Msg.SERIAL_READSTRINGUNTIL_CONTENT);
        this.setInputsInline(true);
        this.setOutput(true, "String");
        this.setTooltip(Blockly.Msg.SERIAL_READSTRINGUNTIL_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.SERIAL_READSTRINGUNTIL_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['BOARD_SERIAL_FLUSH'] = {
    init: function() {
        this.appendDummyInput("")
            .appendField(Blockly.Msg.SERIAL_FLUSH);
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg.SERIAL_PRINT_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.SERIAL_PRINT_HELPURL);
        this.setStyle('board_blocks');
    }
};
Blockly.defineBlocksWithJsonArray(
    [{
        "type": "board_serial_formatCSV",
        "message0": "serialize CSV %1",
        "args0": [{
            "type": "input_dummy"
        }],
        "message1": "data %1",
        "args1": [{
            "type": "input_value",
            "name": "DATA0",
            "check": ['int', 'float', 'Number', 'Array']
        }],
        "message2": "separator %1",
        "args2": [{
            "type": "input_value",
            "name": "SEP0",
            "check": "String"
        }],
        "previousStatement": null,
        "nextStatement": null,
        "style": "board_blocks",
        "helpUrl": "lien vers le wiki",
        "mutator": "SERIAL_FORMAT_CSV_MUTATOR",
        "tooltip": "serial_formatCSV_tooltip"
    }, {
        "type": "mutator_stack",
        "message0": "stack",
        "nextStatement": null,
        "enableContextMenu": null,
        "style": "board_blocks",
        "tooltip": "%{BKY_mutator_this.stack_TOOLTIP}"
    }, {
        "type": "mutator_data",
        "message0": "data to send",
        "previousStatement": null,
        "nextStatement": null,
        "style": "board_blocks",
        "tooltip": "%{BKY_mutator_data_TOOLTIP}"
    }, {
        "type": "mutator_sep",
        "message0": "separator",
        "previousStatement": null,
        "nextStatement": null,
        "style": "board_blocks",
        "tooltip": "%{BKY_mutator_sep_TOOLTIP}"
    }]);

/**
 * Mutator methods added to controls_if blocks.
 * @mixin
 * @augments Blockly.Block
 * @package
 * @readonly
 */
Blockly.Block.FORMATCSV_MUTATOR_MIXIN = {
    dataCount_: 1,
    sepCount_: 1,
    totalCount_: 2,
    stack_: ['d', 's'],

    /**
     * Don't automatically add STATEMENT_PREFIX and STATEMENT_SUFFIX to generated
     * code. These will be handled manually in this block's generators.
     */
    suppressPrefixSuffix: true,

    /**
     * Create XML to represent the number of data and separator inputs.
     * @return {Element} XML storage element.
     * @this {Blockly.Block}
     */
    mutationToDom: function() {
        if (!this.dataCount_ && !this.sepCount_) {
            return null;
        }
        const container = Blockly.utils.xml.createElement('mutation');
        if (this.dataCount_) {
            container.setAttribute('attribData', this.dataCount_);
        }
        if (this.sepCount_) {
            container.setAttribute('attribSep', this.sepCount_);
        }
        console.log('mutationToDom');
        return container;
    },
    /**
     * Parse XML to restore the data and separator inputs.
     * @param {!Element} xmlElement XML storage element.
     * @this {Blockly.Block}
     */
    domToMutation: function(xmlElement) {
        this.dataCount_ = parseInt(xmlElement.getAttribute('attribData'), 10) || 0;
        this.sepCount_ = parseInt(xmlElement.getAttribute('attribSep'), 10) || 0;
        this.totalCount_ = this.dataCount_ + this.sepCount_;
        console.log('domToMutation');
        this.rebuildShape_();
    },
    /**
     * Populate the mutator's dialog with this block's components.
     * @param {!Blockly.Workspace} workspace Mutator's workspace.
     * @return {!Blockly.Block} Root block in mutator.
     * @this {Blockly.Block}
     */
    decompose: function(workspace) {
        var containerBlock = workspace.newBlock('mutator_stack');
        containerBlock.initSvg();
        var connection = containerBlock.nextConnection;
        for (var i = 0; i < this.totalCount_; i++) {
            switch (this.stack_[i]) {
                case 'd':
                    var dataBlock = workspace.newBlock('mutator_data');
                    dataBlock.initSvg();
                    connection.connect(dataBlock.previousConnection);
                    connection = dataBlock.nextConnection;
                    break;
                case 's':
                    var sepBlock = workspace.newBlock('mutator_sep');
                    sepBlock.initSvg();
                    connection.connect(sepBlock.previousConnection);
                    connection = sepBlock.nextConnection;
                    break;
            }
        }
        // console.log('stack ' + this.stack_);
        console.log('decompose');
        return containerBlock;
    },
    /**
     * Reconfigure this block based on the mutator dialog's components.
     * @param {!Blockly.Block} containerBlock Root block in mutator.
     * @this {Blockly.Block}
     */
    compose: function(containerBlock) {
        var clauseBlock = containerBlock.nextConnection.targetBlock();
        // Count number of inputs.
        this.dataCount_ = 0;
        this.sepCount_ = 0;
        this.totalCount_ = 0;
        var dataConnections = [null];
        var separatorConnections = [null];
        while (clauseBlock && !clauseBlock.isInsertionMarker()) {
            switch (clauseBlock.type) {
                case 'mutator_data':
                    this.stack_[this.totalCount_] = 'd';
                    this.dataCount_++;
                    this.totalCount_++;
                    dataConnections.push(clauseBlock.valueConnection_);
                    clauseBlock = clauseBlock.nextConnection && clauseBlock.nextConnection.targetBlock();
                    break;
                case 'mutator_sep':
                    this.stack_[this.totalCount_] = 's';
                    this.sepCount_++;
                    this.totalCount_++;
                    separatorConnections.push(clauseBlock.valueConnection_);
                    clauseBlock = clauseBlock.nextConnection && clauseBlock.nextConnection.targetBlock();
                    break;
                default:
                    throw TypeError('Unknown block type: ' + clauseBlock.type);
            }
        }
        console.log('compose');
        this.updateShape_();
        // Reconnect any child blocks.
        this.reconnectChildBlocks_(dataConnections, separatorConnections);
    },
    /**
     * Store pointers to any connected child blocks.
     * @param {!Blockly.Block} containerBlock Root block in mutator.
     * @this {Blockly.Block}
     */
    saveConnections: function(containerBlock) {
        var clauseBlock = containerBlock.nextConnection.targetBlock();
        var i = 0;
        var j = 0;
        while (clauseBlock) {
            switch (clauseBlock.type) {
                case 'mutator_data':
                    var input = this.getInput('DATA' + i);
                    i++;
                    break;
                case 'mutator_sep':
                    var input = this.getInput('SEP' + j);
                    j++;
                    break;
                default:
                    throw TypeError('Unknown block type: ' + clauseBlock.type);
            }
            clauseBlock.valueConnection_ = input && input.connection.targetConnection;
            // console.log(clauseBlock.valueConnection_);
            clauseBlock = clauseBlock.nextConnection &&
                clauseBlock.nextConnection.targetBlock();
        }
        // console.log('i' + i);
        // console.log('j' + j);
        console.log('saveConnections');
    },
    /**
     * Reconstructs the block with all child blocks attached.
     * @this {Blockly.Block}
     */
    rebuildShape_: function() {
        var valueConnections = [null];
        var i = 0;
        var j = 0;
        var k = 0;
        while (i < this.totalCount_) {
            switch (this.stack_[i]) {
                case 'd':
                    var inputData = this.getInput('DATA' + j);
                    console.log(inputData);
                    valueConnections.push(inputData.connection.targetConnection);
                    j++;
                    break;
                case 's':
                    var inputSep = this.getInput('SEP' + k);
                    console.log(inputSep);
                    valueConnections.push(inputSep.connection.targetConnection);
                    k++;
                    break;
            }
            i++;
        }
        console.log('rebuildShape_');
        console.log(j);
        console.log(k);
        console.log(valueConnections);
        this.updateShape_();
        this.reconnectChildBlocks_(valueConnections);
    },
    /**
     * Modify this block to have the correct number of inputs.
     * @this {Blockly.Block}
     * @private
     */
    updateShape_: function() {
        // Delete everything.
        var i = 0;
        while (this.getInput('DATA' + i)) {
            this.removeInput('DATA' + i);
            i++;
        }
        var i = 0;
        while (this.getInput('SEP' + i)) {
            this.removeInput('SEP' + i);
            i++;
        }
        // Rebuild block.
        var j = 0;
        var k = 0;
        for (i = 0; i < this.totalCount_; i++) {
            switch (this.stack_[i]) {
                case 'd':
                    this.appendValueInput('DATA' + j)
                        .setCheck('Number')
                        .appendField("new data");
                    j++;
                    break;
                case 's':
                    this.appendValueInput('SEP' + k)
                        .setCheck('String')
                        .appendField("data separator");
                    k++;
                    break;
            }
        }
        console.log('updateShape_');
    },
    /**
     * Reconnects child blocks.
     * @param {!Array.<?Blockly.RenderedConnection>} dataConnections List of
     * value connections for 'if' input.
     * @param {!Array.<?Blockly.RenderedConnection>} separatorConnections List of
     * statement connections for 'sep' input.
     * @param {?Blockly.RenderedConnection} elseSeparatorConnection Statement
     * connection for else input.
     * @this {Blockly.Block}
     */
    reconnectChildBlocks_: function(valueConnections) {
        var j = 0;
        var k = 0;
        for (var i = 0; i < this.totalCount_; i++) {
            switch (this.stack_[i]) {
                case 'd':
                    Blockly.Mutator.reconnect(valueConnections[i], this, 'DATA' + j);
                    j++;
                    break;
                case 's':
                    Blockly.Mutator.reconnect(valueConnections[i], this, 'SEP' + k);
                    k++
                    break;
            }
        }
        console.log('reconnectChildBlocks_');
    }
};

Blockly.Extensions.registerMutator('SERIAL_FORMAT_CSV_MUTATOR',
    Blockly.Block.FORMATCSV_MUTATOR_MIXIN, null, ['mutator_data', 'mutator_sep']);