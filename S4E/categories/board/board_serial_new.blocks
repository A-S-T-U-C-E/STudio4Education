/**
 * @license
 * Copyright 2020 Sébastien CANET
 * SPDX-License-Identifier: BSD-3-Clause
 */

/**
 * @fileoverview Basics serial command blocks for Blockly.
 * @author scanet@libreduc.cc (Sébastien Canet)
 */

'use strict';

//To support syntax defined in http://arduino.cc/en/Reference/HomePage

goog.provide('Blockly.Constants.board_serial');

goog.require('Blockly');
goog.require('Blockly.Blocks');
goog.require('Blockly.Types');

var mediaFolder = "./S4E/media/";

Blockly.Blocks['board_serial_init'] = {
    init: function() {
        this.setInputsInline(true);
        this.appendDummyInput("")
            .appendField(Blockly.Msg.SERIAL_INIT)
            .appendField(new Blockly.FieldDropdown(profile.default.serial), "SPEED");
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg.SERIAL_PRINT_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.SERIAL_PRINT_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['board_serial_printfor'] = {
    init: function() {
        this.setInputsInline(true);
        this.appendValueInput("CONTENT")
            .setCheck('Number')
            .appendField(Blockly.Msg.SERIAL_PRINT_FORMAT)
            .appendField(new Blockly.FieldDropdown([
                [Blockly.Msg.SERIAL_PRINT_FORDECIMAL, "DEC"],
                [Blockly.Msg.SERIAL_PRINT_FORHEXA, "HEX"],
                [Blockly.Msg.SERIAL_PRINT_FORBIN, "BIN"],
                [Blockly.Msg.SERIAL_PRINT_FOROCT, "OCT"]
            ]), "TYPE");
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg.SERIAL_PRINT_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.SERIAL_PRINT_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['board_serial_print'] = {
    init: function() {
        this.appendValueInput("CONTENT")
            .appendField(Blockly.Msg.SERIAL_PRINT_CONTENT);
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg.SERIAL_PRINT_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.SERIAL_PRINT_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['board_serial_available'] = {
    init: function() {
        this.appendDummyInput("")
            .appendField(Blockly.Msg.SERIAL_AVAILABLE);
        this.setInputsInline(true);
        this.setOutput(true, "Number");
        this.setTooltip(Blockly.Msg.SERIAL_PRINT_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.SERIAL_PRINT_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['board_serial_read'] = {
    init: function() {
        this.appendDummyInput("")
            .appendField(Blockly.Msg.SERIAL_READ);
        this.setInputsInline(true);
        this.setOutput(true, "Number");
        this.setTooltip(Blockly.Msg.SERIAL_PRINT_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.SERIAL_PRINT_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['board_serial_readStringUntil'] = {
    init: function() {
        this.appendValueInput("CONTENT")
            .setCheck('String')
            .appendField(Blockly.Msg.SERIAL_READSTRINGUNTIL_CONTENT);
        this.setInputsInline(true);
        this.setOutput(true, "String");
        this.setTooltip(Blockly.Msg.SERIAL_READSTRINGUNTIL_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.SERIAL_READSTRINGUNTIL_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['board_serial_flush'] = {
    init: function() {
        this.appendDummyInput("")
            .appendField(Blockly.Msg.SERIAL_FLUSH);
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg.SERIAL_PRINT_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.SERIAL_PRINT_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['board_serial_formatCSV'] = {
    /**
     * Block for creating a list with any number of elements of any type.
     * @this {Blockly.Block}
     */
    init: function() {
        this.dataCount_ = 1;
        this.sepCount_ = 0;
        this.totalCount_ = 1;
        this.stack_ = ['d'];
        this.appendDummyInput()
            .appendField("serialize CSV");
        this.updateShape_();
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setMutator(new Blockly.Mutator(['mutator_data_item']));
        this.setTooltip(Blockly.Msg['LISTS_CREATE_WITH_TOOLTIP']);
        this.setHelpUrl('link to wiki');
        this.setStyle('board_blocks');
    },
    /**
     * Create XML to represent list inputs.
     * @return {!Element} XML storage element.
     * @this {Blockly.Block}
     */
    mutationToDom: function() {
        var container = Blockly.utils.xml.createElement('mutation');
        container.setAttribute('attribData', this.dataCount_);
        container.setAttribute('attribSep', this.sepCount_);
        return container;
    },
    /**
     * Parse XML to restore the list inputs.
     * @param {!Element} xmlElement XML storage element.
     * @this {Blockly.Block}
     */
    domToMutation: function(xmlElement) {
        this.dataCount_ = parseInt(xmlElement.getAttribute('attribData'), 10) || 0;
        this.sepCount_ = parseInt(xmlElement.getAttribute('attribSep'), 10) || 0;
        this.totalCount_ = this.dataCount_ + this.sepCount_;
        this.updateShape_();
    },
    /**
     * Populate the mutator's dialog with this block's components.
     * @param {!Blockly.Workspace} workspace Mutator's workspace.
     * @return {!Blockly.Block} Root block in mutator.
     * @this {Blockly.Block}
     */
    decompose: function(workspace) {
        var containerBlock = workspace.newBlock('mutator_serial_format_container');
        containerBlock.initSvg();
        var connection = containerBlock.getInput('STACK').connection;
        for (var i = 0; i < this.dataCount_; i++) {
            var itemBlock = workspace.newBlock('mutator_data_item');
            itemBlock.initSvg();
            connection.connect(itemBlock.previousConnection);
            connection = itemBlock.nextConnection;
        }
        for (var i = 0; i < this.sepCount_; i++) {
            var itemBlock = workspace.newBlock('mutator_sep_item');
            itemBlock.initSvg();
            connection.connect(itemBlock.previousConnection);
            connection = itemBlock.nextConnection;
        }
        return containerBlock;
    },
    /**
     * Reconfigure this block based on the mutator dialog's components.
     * @param {!Blockly.Block} containerBlock Root block in mutator.
     * @this {Blockly.Block}
     */
    compose: function(containerBlock) {
        var itemBlock = containerBlock.getInputTargetBlock('STACK');
        // Count number of inputs.
        var connections = [];
        var item = 0;
        while (itemBlock && !itemBlock.isInsertionMarker()) {
            switch (itemBlock.type) {
                case 'mutator_data_item':
                    this.stack_[item] = 'd';
                    this.dataCount_++;
                    break;
                case 'mutator_sep_item':
                    this.stack_[item] = 's';
                    this.sepCount_++;
                    break;
            }
            connections.push(itemBlock.valueConnection_);
            itemBlock = itemBlock.nextConnection &&
                itemBlock.nextConnection.targetBlock();
            item++;
        }
        console.log(this.stack_);
        // Disconnect any children that don't belong.
        for (var i = 0; i < item; i++) {
            var connection = this.getInput('ADD' + i).connection.targetConnection;
            if (connection && connections.indexOf(connection) == -1) {
                connection.disconnect();
            }
        }
        this.dataCount_ = item;
        this.updateShape_();
        // Reconnect any child blocks.
        for (var i = 0; i < this.dataCount_; i++) {
            Blockly.Mutator.reconnect(connections[i], this, 'ADD' + i);
        }
    },
    /**
     * Store pointers to any connected child blocks.
     * @param {!Blockly.Block} containerBlock Root block in mutator.
     * @this {Blockly.Block}
     */
    saveConnections: function(containerBlock) {
        var itemBlock = containerBlock.getInputTargetBlock('STACK');
        var i = 0;
        while (itemBlock) {
            var input = this.getInput('ADD' + i);
            itemBlock.valueConnection_ = input && input.connection.targetConnection;
            i++;
            itemBlock = itemBlock.nextConnection &&
                itemBlock.nextConnection.targetBlock();
        }
    },
    /**
     * Modify this block to have the correct number of inputs.
     * @private
     * @this {Blockly.Block}
     */
    updateShape_: function() {
        if (this.dataCount_ && this.getInput('EMPTY')) {
            this.removeInput('EMPTY');
        } else if (!this.dataCount_ && !this.getInput('EMPTY')) {
            this.appendDummyInput('EMPTY')
                .appendField('add data source and separator');
        }
        // Add new inputs.
        for (var i = 0; i < this.dataCount_; i++) {
            if (!this.getInput('ADD' + i)) {
                var input =
                    this.appendValueInput('ADD' + i)
                    .setCheck(['int', 'float', 'Number', 'Array'])
                    .appendField("data")
                    .setAlign(Blockly.ALIGN_RIGHT);
            }
        }
        // Remove deleted inputs.
        while (this.getInput('ADD' + i)) {
            this.removeInput('ADD' + i);
            i++;
        }
    }
};

Blockly.Blocks['mutator_serial_format_container'] = {
    /**
     * Mutator block for container.
     * @this {Blockly.Block}
     */
    init: function() {
        this.setStyle('board_blocks');
        this.appendDummyInput()
            .appendField('stack');
        this.appendStatementInput('STACK');
        this.setTooltip(Blockly.Msg['mutator_serial_format_container_TOOLTIP']);
        this.contextMenu = false;
    }
};

Blockly.Blocks['mutator_data_item'] = {
    /**
     * Mutator block for adding data items.
     * @this {Blockly.Block}
     */
    init: function() {
        this.setStyle('board_blocks');
        this.appendDummyInput()
            .appendField('data to send');
        this.setPreviousStatement(true);
        this.setNextStatement(true);
        this.setTooltip(Blockly.Msg['LISTS_CREATE_WITH_ITEM_TOOLTIP']);
        this.contextMenu = false;
    }
};

Blockly.Blocks['mutator_sep_item'] = {
    /**
     * Mutator block for adding separator items.
     * @this {Blockly.Block}
     */
    init: function() {
        this.setStyle('board_blocks');
        this.appendDummyInput()
            .appendField('separator');
        this.setPreviousStatement(true);
        this.setNextStatement(true);
        this.setTooltip(Blockly.Msg['LISTS_CREATE_WITH_ITEM_TOOLTIP']);
        this.contextMenu = false;
    }
};