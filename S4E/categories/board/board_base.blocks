/**
 * @license
 * Copyright 2020 Sébastien CANET
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Basics board command blocks for Blockly.
 * @author gasolin@gmail.com (Fred Lin)
 * @author scanet@libreduc.cc (Sébastien Canet)
 */

'use strict';

//To support syntax defined in http://arduino.cc/en/Reference/HomePage

goog.provide('Blockly.Constants.board_base');

goog.require('Blockly');
goog.require('Blockly.Blocks');
goog.require('Blockly.Types');

var mediaFolder = "./S4E/media/";

Blockly.Blocks['base_define_bloc'] = {
    init: function() {
        this.appendDummyInput("")
            .appendField("define");
        this.appendStatementInput('DO')
            .appendField(Blockly.LANG_CONTROLS_REPEAT_INPUT_DO);
        this.setTooltip(Blockly.Msg.ARDUINO_BASE_DEFINE_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.ARDUINO_BASE_DEFINE_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['board_base_setup'] = {
    init: function() {
        this.appendDummyInput()
            .appendField("setup");
        this.appendStatementInput("SETUP")
            .setCheck(null);
        this.setInputsInline(false);
        this.setTooltip('The setup() function is called when a sketch starts.\nUse it to initialize variables, pin modes, start using libraries, etc.\nThe setup() function will only run once, after each powerup or reset of the Arduino board.');
        this.setHelpUrl('https://www.arduino.cc/reference/en/language/structure/sketch/setup/');
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['board_base_loop'] = {
    init: function() {
        this.appendDummyInput()
            .appendField("loop");
        this.appendStatementInput("LOOP")
            .setCheck(null);
        this.setInputsInline(false);
        this.setTooltip('the loop() function does precisely what its name suggests, and loops consecutively');
        this.setHelpUrl('https://www.arduino.cc/reference/en/language/structure/sketch/loop/');
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['board_base_inout_buildin_led'] = {
    init: function() {
        this.appendDummyInput()
            .appendField(Blockly.Msg.ARDUINO_INOUT_BUILDIN_LED_INPUT)
            .appendField(new Blockly.FieldDropdown(Blockly.Msg.FIELDDROPDOWN), 'STAT');
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg.ARDUINO_INOUT_BUILDIN_LED_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.ARDUINO_INOUT_BUILDIN_LED_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['board_base_inout_digital_write'] = {
    init: function() {
        this.appendDummyInput()
            .appendField(new Blockly.FieldImage(mediaFolder + "digital.jpg", 32, 32), 'iconToChange')
            .appendField(Blockly.Msg.ARDUINO_INOUT_DIGITAL_WRITE_INPUT1)
            .appendField(new Blockly.FieldDropdown(profile.default.dropdownDigital), "PIN")
            .appendField(Blockly.Msg.ARDUINO_INOUT_DIGITAL_WRITE_INPUT2)
            .appendField(new Blockly.FieldDropdown(Blockly.Msg.FIELDDROPDOWN, this.changeIcon), 'STAT');
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg.ARDUINO_INOUT_DIGITAL_WRITE_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.ARDUINO_INOUT_DIGITAL_WRITE_HELPURL);
        this.setStyle('board_blocks');
    },
    changeIcon: function(newValue) {
        var iconToChange = this.getSourceBlock().getField('iconToChange');
        if (newValue == 'HIGH')
            iconToChange.setValue(mediaFolder + "7Segment1.svg");
        else
            iconToChange.setValue(mediaFolder + "7Segment0.svg");
    }
};

Blockly.Blocks['board_base_inout_digital_read'] = {
    init: function() {
        this.appendDummyInput()
            .appendField(Blockly.Msg.ARDUINO_INOUT_DIGITAL_READ_INPUT)
            .appendField(new Blockly.FieldDropdown(profile.default.dropdownDigital), "PIN");
        this.setOutput(true, 'Boolean');
        this.setTooltip(Blockly.Msg.ARDUINO_INOUT_DIGITAL_READ_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.ARDUINO_INOUT_DIGITAL_READ_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['board_base_inout_highlow'] = {
    init: function() {
        this.appendDummyInput()
            .appendField(new Blockly.FieldDropdown(Blockly.Msg.FIELDDROPDOWN), 'BOOL')
        this.setOutput(true, 'Boolean');
        this.setTooltip(Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.ARDUINO_INOUT_ONOFF_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['board_base_inout_analog_write'] = {
    init: function() {
        this.appendDummyInput()
            .appendField(new Blockly.FieldImage(mediaFolder + "pwm.png", Code.imageSize, Code.imageSize))
            .appendField(Blockly.Msg.ARDUINO_INOUT_ANALOG_WRITE_INPUT1)
            .appendField(new Blockly.FieldDropdown(profile.default.dropdownPWM), "PIN");
        this.appendValueInput("PWM", 'Number')
            .appendField(Blockly.Msg.ARDUINO_INOUT_ANALOG_WRITE_INPUT2)
            .setCheck("Number");
        this.setInputsInline(true);
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg.ARDUINO_INOUT_ANALOG_WRITE_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.ARDUINO_INOUT_ANALOG_WRITE_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['board_base_inout_analog_write_slider'] = {
    init: function() {
        this.appendDummyInput()
            .appendField(new Blockly.FieldImage(mediaFolder + "pwm.png", Code.imageSize, Code.imageSize))
            .appendField(Blockly.Msg.ARDUINO_INOUT_ANALOG_WRITE_INPUT1)
            .appendField(new Blockly.FieldDropdown(profile.default.dropdownPWM), "PIN");
        this.appendDummyInput()
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField(Blockly.Msg.ARDUINO_INOUT_ANALOG_WRITE_INPUT2)
            .appendField(new FieldSlider(127, 0, 255, 1), "PWM");
        this.setInputsInline(true);
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg.ARDUINO_INOUT_ANALOG_WRITE_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.ARDUINO_INOUT_ANALOG_WRITE_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['board_base_inout_analog_read'] = {
    init: function() {
        this.appendDummyInput()
            .appendField(Blockly.Msg.ARDUINO_INOUT_ANALOG_READ_INPUT)
            .appendField(new Blockly.FieldDropdown(profile.default.dropdownAnalog), "PIN");
        this.setOutput(true, 'int');
        this.setTooltip(Blockly.Msg.ARDUINO_INOUT_ANALOG_READ_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.ARDUINO_INOUT_ANALOG_READ_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['board_base_delay'] = {
    init: function() {
        this.appendValueInput("DELAY_TIME", 'Number')
            .appendField(Blockly.Msg.ARDUINO_BASE_DELAY_DELAY_TIME)
            .setCheck("Number");
        this.setInputsInline(true);
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg.ARDUINO_BASE_DELAY_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.ARDUINO_BASE_DELAY_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['board_base_angle'] = {
    init: function() {
        this.appendDummyInput()
            .appendField(Blockly.Msg.ARDUINO_BASE_ANGLE)
            .appendField(new Blockly.FieldAngle(90), 'ANGLE');
        this.setOutput(true, Blockly.Types.NUMBER);
        this.setTooltip(Blockly.Msg.ARDUINO_BASE_ANGLE_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.ARDUINO_BASE_ANGLE_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['board_base_map'] = {
    init: function() {
        this.appendValueInput("NUM")
            .appendField(Blockly.Msg.ARDUINO_BASE_MAP1)
            .setCheck("Number");
        this.appendValueInput("DMAX")
            .appendField(Blockly.Msg.ARDUINO_BASE_MAP2)
            .setCheck("Number");
        this.appendDummyInput()
            .appendField("]");
        this.setInputsInline(true);
        this.setOutput(true);
        this.setTooltip(Blockly.Msg.ARDUINO_BASE_MAP_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.ARDUINO_BASE_MAP_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['board_base_inout_tone'] = {
    init: function() {
        this.appendDummyInput()
            .appendField(Blockly.Msg.ARDUINO_TONE_INPUT1)
            .appendField(new Blockly.FieldDropdown(profile.default.dropdownDigital), "PIN");
        this.appendValueInput("NUM")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField(Blockly.Msg.ARDUINO_TONE_INPUT2)
            .setCheck("Number");
        this.setInputsInline(true);
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg.ARDUINO_TONE_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.ARDUINO_TONE_HELPURL);
        this.setStyle('board_blocks');
    }
};

Blockly.Blocks['board_base_inout_notone'] = {
    init: function() {
        this.appendDummyInput()
            .appendField(Blockly.Msg.ARDUINO_NOTONE_INPUT)
            .appendField(new Blockly.FieldDropdown(profile.default.dropdownDigital), "PIN");
        this.setInputsInline(true);
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg.ARDUINO_NOTONE_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.ARDUINO_NOTONE_HELPURL);
        this.setStyle('board_blocks');
    }
};