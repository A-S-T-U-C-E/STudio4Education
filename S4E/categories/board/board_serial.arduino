/**
 * @license
 * Copyright 2020 Sébastien CANET
 * SPDX-License-Identifier: BSD-3-Clause
 */

/**
 * @fileoverview Generating Arduino code for basics board command blocks.
 * @author scanet@libreduc.cc (Sébastien CANET)
 */

'use strict';

goog.provide('Blockly.Arduino.board_serial');

goog.require('Blockly.Arduino');

Blockly.Arduino['BOARD_SERIAL_INIT'] = function(block) {
    var dropdown_speed = block.getFieldValue('SPEED');
    Blockly.Arduino.setups_['serial_begin'] = 'Serial.begin(' + dropdown_speed + ');';
    return "";
};

Blockly.Arduino['BOARD_SERIAL_PRINTFOR'] = function(block) {
    var content = Blockly.Arduino.valueToCode(block, 'CONTENT', Blockly.Arduino.ORDER_NONE);
    var type = block.getFieldValue('TYPE');
    var code = 'Serial.println(' + content + ',' + type + ');\n';
    return code;
};

Blockly.Arduino['BOARD_SERIAL_PRINT'] = function(block) {
    var content = Blockly.Arduino.valueToCode(block, 'CONTENT', Blockly.Arduino.ORDER_ATOMIC) || '0';
    var code = 'Serial.println(' + content + ');\n';
    return code;
};

Blockly.Arduino['BOARD_SERIAL_WRITE'] = function(block) {
    var content = Blockly.Arduino.valueToCode(block, 'CONTENT', Blockly.Arduino.ORDER_ATOMIC) || '0';
    var code = 'Serial.write(' + content + ');\n';
    return code;
};

Blockly.Arduino['BOARD_SERIAL_AVAILABLE'] = function(block) {
    var code = 'Serial.available()';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino['BOARD_SERIAL_READ'] = function(block) {
    var code = 'Serial.read()';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino['BOARD_SERIAL_READSTRINGUNTIL'] = function(block) {
    var content = Blockly.Arduino.valueToCode(block, 'CONTENT', Blockly.Arduino.ORDER_NONE);
    content = content.replace('"', '\'');
    content = content.replace('"', '\'');
    var code = 'Serial.readStringUntil(' + content + ')';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};

/**
 * Code generator to prompt the user with a string (X) and request input.
 * Serial info: http://arduino.cc/en/Reference/Serial
 * Arduino code: getUserInputPrompt(...) { ... }
 *               loop { getUserInputPrompt("X")) }
 * @param {!Blockly.Block} block Block to generate the code from.
 * @return {array} Completed code with order of operation.
 */
Blockly.Arduino['BOARD_SERIAL_TEXT_PROMPT_EXT'] = function(block) {
    // Get the first Serial peripheral of arduino board
    var serialId = 'Serial';
    // var serialId = profile["default"][0]Board.serial;
    var returnType = block.getFieldValue('TYPE');

    // The function code changes based on reading a number or string
    var func = [];
    var toNumber = returnType == Blockly.Types.NUMBER.basicType;
    if (toNumber) {
        func.push('int ' + Blockly.Arduino.DEF_FUNC_NAME + '(String msg) {');
    } else {
        func.push('String ' + Blockly.Arduino.DEF_FUNC_NAME + '(String msg) {');
    }
    func.push('  ' + serialId + '.println(msg);');
    func.push('  boolean stringComplete = false;');
    if (toNumber) {
        func.push('  int content = 0;'); // + serialId + '.parseInt();');
    } else {
        func.push('  String content = "";');
    }
    func.push('  while (stringComplete == false) {');
    func.push('    if (' + serialId + '.available()) {');
    if (toNumber) {
        func.push('      content = ' + serialId + '.parseInt();');
        func.push('      stringComplete = true;');
    } else {
        func.push('      char readChar = (char)' + serialId + '.read();');
        func.push('      if (readChar == \'\\n\' || readChar == \'\\r\') {');
        func.push('        stringComplete = true;');
        func.push('      } else {');
        func.push('        content += readChar;');
        func.push('      }');
    }
    func.push('    }');
    func.push('  }');
    func.push('  // Empty incoming serial buffer');
    func.push('  while(Serial.available()) { Serial.read(); };');
    func.push('  return content;');
    func.push('}');
    var funcName = Blockly.Arduino.addFunction(
        'getUserInputPrompt' + returnType, func.join('\n'));

    // Only overwrite the serial set up if not present already
    var setupCode = serialId + '.begin(9600);';
    Blockly.Arduino.addSetup('serial_begin', setupCode, false);

    var msg = Blockly.Arduino.valueToCode(block, 'TEXT',
        Blockly.Arduino.ORDER_NONE) || '""';
    var code = funcName + '(' + msg + ')';

    return [code, Blockly.Arduino.ORDER_UNARY_POSTFIX];
};

Blockly.Arduino['BOARD_SERIAL_FLUSH'] = function(block) {
    var code = 'Serial.flush();\n';
    return code;
};

Blockly.Arduino['board_serial_formatJSON'] = function(block) {
    var code = 'Serial.flush();\n';
    return code;
};

Blockly.Arduino['bOARD_SERIAL_FORMAT_CSV'] = function(block) {
    var i = 0;
    var j = 0;
    var k = 0;
    var dataCode = 0;
    var sepCode = 0;
    var code = '';
    // while ((block.getInput('DATA' + j)) || (block.getInput('SEP' + k))) {
    // dataCode = Blockly.Arduino.valueToCode(block, 'DATA' + j, Blockly.Arduino.ORDER_ATOMIC) || '';
    // sepCode = Blockly.Arduino.valueToCode(block, 'SEP' + k, Blockly.Arduino.ORDER_ATOMIC) || '';
    // if (dataCode != '') {
    // code += 'Serial.println(' + dataCode + ');\n';
    // j++;
    // } else if (sepCode != '') {
    // code += 'Serial.println(' + sepCode + ');\n';
    // k++;
    // }
    // i++;
    // }
    return code + '\n';
};

Blockly.Arduino['BOARD_SERIAL_AUTOFORMAT_CSV'] = function(block) {
    var elements = new Array(block.itemCount_);
    var code = '';
    for (var i = 0; i < block.itemCount_; i++) {
        elements[i] = Blockly.Arduino.valueToCode(block, 'ADD' + i,
            Blockly.Arduino.ORDER_NONE) || 'null';
        code += "Serial.print(" + elements[i] + ");\n";
        code += "Serial.print(';');\n";
    }
    code = code.substring(0, code.length - 19);
    code += "Serial.println();\n";
    return code;
};