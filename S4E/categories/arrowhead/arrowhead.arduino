/**
 * @license
 * Copyright 2020 Sébastien CANET
 * SPDX-License-Identifier: BSD-3-Clause
 */

/**
 * @fileoverview Arrowhead framework specifics
 * @author scanet@libreduc.cc (Sébastien Canet)
 */

'use strict';

goog.provide('Blockly.Arduino.arrowhead');

goog.require('Blockly.Arduino');

Blockly.Arduino['AHF_CUSTOM_PARAMETERS_SR'] = function(block) {
    var value_sr_address = Blockly.Arduino.valueToCode(block, 'SR_ADDRESS', Blockly.Arduino.ORDER_ATOMIC);
    var value_sr_port = Blockly.Arduino.valueToCode(block, 'SR_PORT', Blockly.Arduino.ORDER_ATOMIC);
    var checkbox_server_ssl_enabled = block.getFieldValue('SERVER_SSL_ENABLED') == 'TRUE';
    var checkbox_token_security_filter_enabled = block.getFieldValue('TOKEN_SECURITY_FILTER_ENABLED') == 'TRUE';
    var value_server_ssl_key_store_type = Blockly.Arduino.valueToCode(block, 'SERVER_SSL_KEY_STORE_TYPE', Blockly.Arduino.ORDER_ATOMIC);
    var value_server_ssl_key_store_password = Blockly.Arduino.valueToCode(block, 'SERVER_SSL_KEY_STORE_PASSWORD', Blockly.Arduino.ORDER_ATOMIC);
    var value_server_ssl_key_alias = Blockly.Arduino.valueToCode(block, 'SERVER_SSL_KEY_ALIAS', Blockly.Arduino.ORDER_ATOMIC);
    var value_server_ssl_key_password = Blockly.Arduino.valueToCode(block, 'SERVER_SSL_KEY_PASSWORD', Blockly.Arduino.ORDER_ATOMIC);
    var value_server_ssl_client_auth = Blockly.Arduino.valueToCode(block, 'SERVER_SSL_CLIENT_AUTH', Blockly.Arduino.ORDER_ATOMIC);
    var value_server_ssl_trust_store_type = Blockly.Arduino.valueToCode(block, 'SERVER_SSL_TRUST_STORE_TYPE', Blockly.Arduino.ORDER_ATOMIC);
    var value_server_ssl_trust_store = Blockly.Arduino.valueToCode(block, 'SERVER_SSL_TRUST_STORE', Blockly.Arduino.ORDER_ATOMIC);
    var value_server_ssl_trust_store_password = Blockly.Arduino.valueToCode(block, 'SERVER_SSL_TRUST_STORE_PASSWORD', Blockly.Arduino.ORDER_ATOMIC);
    Blockly.Arduino.includes_['ARDUINO_JSON'] = '#include <ArduinoJson.h>';
    Blockly.Arduino.definitions_['AHF_CUSTOM_PARAMETERS_SR'] = '#define SRaddress_ ' + value_sr_address + '\n' +
        '#define SRport_ ' + value_sr_port;
    let code = ''
    return code;
};

Blockly.Arduino['AHF_CUSTOM_PARAMETERS_SYSTEM'] = function(block) {
    var value_system_name = Blockly.Arduino.valueToCode(block, 'SYSTEM_NAME', Blockly.Arduino.ORDER_ATOMIC);
    var value_system_address = Blockly.Arduino.valueToCode(block, 'SYSTEM_ADDRESS', Blockly.Arduino.ORDER_ATOMIC);
    var value_system_port = Blockly.Arduino.valueToCode(block, 'SYSTEM_PORT', Blockly.Arduino.ORDER_ATOMIC);
    Blockly.Arduino.definitions_['AHF_CUSTOM_PARAMETERS_SYSTEM'] = '#define systemName_ ' + value_system_name + '\n' +
        '#define systemAddress_ ' + value_system_address + '\n' +
        '#define systemPort_ ' + value_system_port;
    let code = ''
    return code;
};

Blockly.Arduino['AHF_CUSTOM_PARAMETERS_SERVICE'] = function(block) {
    var value_service_definition = Blockly.Arduino.valueToCode(block, 'SERVICE_DEFINITION', Blockly.Arduino.ORDER_ATOMIC);
    var value_service_interface = Blockly.Arduino.valueToCode(block, 'SERVICE_INTERFACE', Blockly.Arduino.ORDER_ATOMIC);
    Blockly.Arduino.definitions_['AHF_CUSTOM_PARAMETERS_SERVICE'] = '#define serviceDefinition_ ' + value_service_definition + '\n' +
        '#define serviceInterface_ ' + value_service_interface;
    let code = ''
    return code;
};

Blockly.Arduino['AHF_CUSTOM_BUILD_SERVICEREGISTRYENTRY'] = function(block) {
    var value_serviceURI = Blockly.Arduino.valueToCode(block, 'serviceURI', Blockly.Arduino.ORDER_ATOMIC);
    var value_service_version = Blockly.Arduino.valueToCode(block, 'version', Blockly.Arduino.ORDER_ATOMIC);
    var value_service_endOfValidity = Blockly.Arduino.valueToCode(block, 'endOfValidity', Blockly.Arduino.ORDER_ATOMIC);
    Blockly.Arduino.definitions_['AHF_CUSTOM_PARAMETERS_SR'] = '#define serviceURI_ ' + value_serviceURI + '\n' +
        '#define endOfValidity_ ' + value_service_endOfValidity + '\n' +
        '#define serviceVersion_ ' + value_service_version;
    Blockly.Arduino.userFunctions_['AHF_CUSTOM_PARAMETERS_SR'] = 'String buildServiceRegistryEntry(char* SystemName, char* ServiceDefinition, char* ServiceInterface, int SystemPort, char* ServiceURI, int ServiceVersion){\n' +
        '  StaticJsonDocument<500> SREntry;\n' +
        '  JsonObject root = SREntry.createNestedObject();\n' +
        '  JsonObject endOfValidity = root.createNestedObject("endOfValidity");\n' +
        '  root["endOfValidity"] = endOfValidity_;\n' +
        '\n' +
        '  JsonArray interfaces = root.createNestedArray("interfaces");\n' +
        '  interfaces.add(ServiceInterface);\n' +
        '\n' +
        '  JsonObject providerSystem = root.createNestedObject("providerSystem");\n' +
        '  root["providerSystem"]["address"] = WiFi.localIP();\n' +
        '  root["providerSystem"]["authenticationInfo"] = "";\n' +
        '  root["providerSystem"]["port"] = SystemPort;\n' +
        '  root["providerSystem"]["systemName"] = SystemName;\n' +
        '\n' +
        '  JsonObject secure = root.createNestedObject("secure");\n' +
        '  root["secure"] = "NOT_SECURE";\n' +
        '\n' +
        '  JsonObject serviceDefinition = root.createNestedObject("serviceDefinition");\n' +
        '  root["serviceDefinition"] = ServiceDefinition;\n' +
        '\n' +
        '  JsonObject serviceUri = root.createNestedObject("serviceUri");\n' +
        '  root["serviceUri"] = ServiceURI;\n' +
        '\n' +
        '  JsonObject serviceVersion = root.createNestedObject("version");\n' +
        '  root["version"] = ServiceVersion;\n' +
        '\n' +
        '  //TODO: add service metadata if you need!\n' +
        '  //JsonObject metadata = providedService.createNestedObject("metadata");\n' +
        '  //metadata["unit"] = "celsius";\n' +
        '\n' +
        '  String ServiceRegistryEntry;\n' +
        '  serializeJsonPretty(root, ServiceRegistryEntry);\n' +
        '  return ServiceRegistryEntry;\n' +
        '}\n';
    let code = 'buildServiceRegistryEntry(systemName_, serviceDefinition_, serviceInterface_, systemPort_, serviceURI_, serviceVersion_)';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};