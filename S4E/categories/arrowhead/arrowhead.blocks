/**
 * @license
 * Copyright 2020 Sébastien CANET
 * SPDX-License-Identifier: BSD-3-Clause
 */

/**
 * @fileoverview Arrowhead framework specifics
 * @author scanet@libreduc.cc (Sébastien Canet)
 */

'use strict';

goog.provide('Blockly.Constants.arrowhead');

goog.require('Blockly');
goog.require('Blockly.Blocks');
goog.require('Blockly.Types');

var arrowheadMediaFolder = "./S4E/categories/arrowhead/";

Blockly.Blocks['AHF_CUSTOM_PARAMETERS_SR'] = {
    init: function() {
        this.appendDummyInput()
            .appendField(new Blockly.FieldImage(arrowheadMediaFolder + "arrowhead.svg", Code.imageSize, Code.imageSize, "*"))
            .appendField("ArrowHead Service Registry setup");
        this.appendValueInput("SR_ADDRESS")
            .setCheck("String")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField("Service Registry Address");
        this.appendValueInput("SR_PORT")
            .setCheck("Number")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField("Service Registry Port");
        this.appendDummyInput()
            .appendField("configure secure mode");
        this.appendDummyInput()
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField("Server SSL security enabled?")
            .appendField(new Blockly.FieldCheckbox("TRUE", this.showHideSecurity), "SERVER_SSL_ENABLED");
        this.appendDummyInput()
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField("Token Security filter enabled?")
            .appendField(new Blockly.FieldCheckbox("TRUE"), "TOKEN_SECURITY_FILTER_ENABLED");
        this.appendValueInput("SERVER_SSL_KEY_STORE_TYPE")
            .setCheck("String")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField("Server SSL key store name");
        this.appendValueInput("SERVER_SSL_KEY_STORE_PASSWORD")
            .setCheck("String")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField("Server SSL key store password");
        this.appendValueInput("SERVER_SSL_KEY_ALIAS")
            .setCheck("String")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField("Server SSL key alias");
        this.appendValueInput("SERVER_SSL_KEY_PASSWORD")
            .setCheck("String")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField("Server SSL key password");
        this.appendValueInput("SERVER_SSL_CLIENT_AUTH")
            .setCheck("String")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField("Server SSL client authorization");
        this.appendValueInput("SERVER_SSL_TRUST_STORE_TYPE")
            .setCheck("String")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField("Server SSL trust store type");
        this.appendValueInput("SERVER_SSL_TRUST_STORE")
            .setCheck("String")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField("Server SSL trust store name");
        this.appendValueInput("SERVER_SSL_TRUST_STORE_PASSWORD")
            .setCheck("String")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField("Server SSL trust store password");
        this.setInputsInline(false);
        this.setTooltip('this blocks helps to...');
        this.setHelpUrl('https://www.arduino.cc/reference/en/');
        this.setStyle('arrowhead_blocks');
    },
    showHideSecurity: function() {
        let check = this.getSourceBlock().getField('SERVER_SSL_ENABLED').value_;
        console.log(check);
    }
};

Blockly.Blocks['AHF_CUSTOM_PARAMETERS_SYSTEM'] = {
    init: function() {
        this.appendDummyInput()
            .appendField(new Blockly.FieldImage(arrowheadMediaFolder + "arrowhead.svg", Code.imageSize, Code.imageSize, "*"))
            .appendField("ArrowHead system setup");
        this.appendValueInput("SYSTEM_NAME")
            .setCheck("String")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField("System Name");
        this.appendValueInput("SYSTEM_ADDRESS")
            .setCheck("String")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField("Provider Address");
        this.appendValueInput("SYSTEM_PORT")
            .setCheck("Number")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField("Provider Port");
        this.setInputsInline(false);
        this.setTooltip('this blocks helps to...');
        this.setHelpUrl('https://www.arduino.cc/reference/en/');
        this.setStyle('arrowhead_blocks');
    }
};

Blockly.Blocks['AHF_CUSTOM_PARAMETERS_SERVICE'] = {
    init: function() {
        this.appendDummyInput()
            .appendField(new Blockly.FieldImage(arrowheadMediaFolder + "arrowhead.svg", Code.imageSize, Code.imageSize, "*"))
            .appendField("ArrowHead service setup");
        this.appendValueInput("SERVICE_DEFINITION")
            .setCheck("String")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField("Service Definition");
        this.appendValueInput("SERVICE_INTERFACE")
            .setCheck("String")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField("Interface");
        this.setInputsInline(false);
        this.setTooltip('this blocks helps to...');
        this.setHelpUrl('https://www.arduino.cc/reference/en/');
        this.setStyle('arrowhead_blocks');
    }
};

Blockly.Blocks['AHF_CUSTOM_BUILD_SERVICEREGISTRYENTRY'] = {
    init: function() {
        this.appendDummyInput()
            .appendField("build service registry request");
        this.appendValueInput("serviceURI")
            .setCheck("String")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField("serviceURI");
        this.appendValueInput("version")
            .setCheck("Number")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField("version");
        this.appendValueInput("endOfValidity")
            .setCheck("String")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField("end of validity");
        this.setOutput(true, 'String');
        this.setTooltip("");
        this.setHelpUrl("");
        this.setStyle('arrowhead_blocks');
    }
};