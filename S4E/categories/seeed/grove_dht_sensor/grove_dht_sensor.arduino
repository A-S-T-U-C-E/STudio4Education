/**
 * @license
 * Copyright 2020 Sébastien CANET
 * SPDX-License-Identifier: BSD-3-Clause
 */

/**
 * @fileoverview DHT temperature & humidity sensors blocks for Blockly.
 * @author scanet@libreduc.cc (Sébastien Canet)
 */

'use strict';

goog.provide('Blockly.Arduino.grove_dht_sensor');

goog.require('Blockly.Arduino');

Blockly.Arduino['GROVE_DHT_SENSOR_READ'] = function() {
    var sensor = this.getFieldValue('SENSOR');
    var pin = this.getFieldValue('PIN');
    var type = this.getFieldValue('TYPE');
    Blockly.Arduino.includes_['define_dht_' + pin + '_' + sensor] = '#include <SimpleDHT.h>'
    Blockly.Arduino.userFunctions_['grove_dht_sensor_' + type] =
        'byte grove_dht_sensor_' + type + '() {\n' +
        '   byte temperature = 0;\n' +
        '   byte humidity = 0;\n' +
        '   byte err = SimpleDHTErrSuccess;\n' +
        '   delay(1500);\n' +
        '   if ((err = ' + sensor + '_' + pin + '.read(&temperature, &humidity, NULL)) != SimpleDHTErrSuccess) {\n' +
        '      Serial.print("Read DHT failed, err=");\n' +
        '      Serial.print(SimpleDHTErrCode(err));\n' +
        '      Serial.print(",");\n' +
        '      Serial.println(SimpleDHTErrDuration(err));\n' +
        '      return err;\n' +
        '   } else {\n';

    switch (type) {
        case 'H':
            Blockly.Arduino.userFunctions_['grove_dht_sensor_' + type] += '      return humidity;\n' +
                '   }\n' +
                '}';
            break;
        case 'T':
            Blockly.Arduino.userFunctions_['grove_dht_sensor_' + type] += '      return temperature;\n' +
                '   }\n' +
                '}';
            break;
    }
    Blockly.Arduino.definitions_['define_dht_' + pin + '_' + sensor] = 'Simple' + sensor + ' ' + sensor + '_' + pin + '(' + pin + ');';
    let code = 'grove_dht_sensor_' + type + '()';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};