/**
 * @license
 * Copyright 2020 Sébastien CANET
 * SPDX-License-Identifier: BSD-3-Clause
 */

/**
 * @fileoverview Arrowhead framework specifics
 * @author scanet@libreduc.cc (Sébastien Canet)
 */

'use strict';

goog.provide('Blockly.Arduino.arrowheadframework');

goog.require('Blockly.Arduino');

Blockly.Arduino['ahf_esp_define'] = function (block) {
    var system_public_key = Blockly.Arduino.valueToCode(block, 'KEY', Blockly.Arduino.ORDER_ATOMIC);
    var config_network = Blockly.Arduino.valueToCode(block, 'CONFIG_NETWORK', Blockly.Arduino.ORDER_ATOMIC);
    var config_ssl = Blockly.Arduino.valueToCode(block, 'CONFIG_SSL', Blockly.Arduino.ORDER_ATOMIC);
    var config_provider = Blockly.Arduino.valueToCode(block, 'CONFIG_PROVIDER', Blockly.Arduino.ORDER_ATOMIC);

    Blockly.Arduino.includes_['ahf_esp_define'] = '#include <ArrowheadESP.h>';
    Blockly.Arduino.definitions_['ahf_esp_define'] = 'ArrowheadESP Arrowhead;';
    Blockly.Arduino.definitions_['ahf_esp_define_systemName'] = 'const char* publicKey = ' + system_public_key + ';';
    Blockly.Arduino.setups_['ahf_esp_setup'] = 'Arrowhead.getArrowheadESPFS().loadConfigFile(' + config_network + ');\n' +
        '  Arrowhead.getArrowheadESPFS().loadSSLConfigFile(' + config_ssl + ');\n' +
        '  Arrowhead.getArrowheadESPFS().loadProviderConfigFile(' + config_provider + ');\n';
    var code = '';
    return code;
};

Blockly.Arduino['ahf_esp_service_registry_def'] = function (block) {
    var system_name = Blockly.Arduino.valueToCode(block, 'NAME', Blockly.Arduino.ORDER_ATOMIC);
    var system_port = Blockly.Arduino.valueToCode(block, 'PORT', Blockly.Arduino.ORDER_ATOMIC);
    var service_definition = Blockly.Arduino.valueToCode(block, 'SERVICE_DEFINITION', Blockly.Arduino.ORDER_ATOMIC);
    var dropdown_interface = block.getFieldValue('INTERFACE');
    var value_endofvalidity = (Blockly.Arduino.valueToCode(block, 'endOfValidity', Blockly.Arduino.ORDER_ATOMIC) + " 00:00:00").replaceAll('"', '');
    var value_version = Blockly.Arduino.valueToCode(block, 'VERSION', Blockly.Arduino.ORDER_ATOMIC);
    var value_path = Blockly.Arduino.valueToCode(block, 'PATH', Blockly.Arduino.ORDER_ATOMIC);
    Blockly.Arduino.definitions_['ahf_esp_define_serviceregistry'] = 'const char* systemName = ' + system_name + ';\n' +
        'const char* serviceDefinition = ' + service_definition + ';\n' +
        'int port = ' + system_port + ';\n' +
        'String serviceRegistryEntry = "{\\"endOfValidity\\":\\"' + value_endofvalidity + '\\",\\"interfaces\\":[\\"' +
        dropdown_interface + '\\"],\\"providerSystem\\":{\\"address\\":\\" " + Arrowhead.getIP() + "\\",\\"authenticationInfo\\":\\"" + publicKey + "\\",\\"port\\":" + port + ",\\"systemName\\":\\"" + systemName + "\\"},\\"secure\\":\\"CERTIFICATE\\",\\"serviceDefinition\\":\\"temperature\\",\\"serviceUri\\":\\"' + value_path.replaceAll('"', '') + '\\",\\"version\\":' + value_version + '}";';
    Blockly.Arduino.setups_['ahf_esp_setup'] += '  Arrowhead.setServiceRegistryAddress(\n' +
        '    Arrowhead.getArrowheadESPFS().getProviderInfo().serviceRegistryAddress,\n' +
        '    Arrowhead.getArrowheadESPFS().getProviderInfo().serviceRegistryPort\n' +
        '  );';
    var code = '';
    return code;
};

Blockly.Arduino['ahf_esp_connection_registry_test'] = function (block) {
    Blockly.Arduino.userFunctions_['ahf_esp_connection_registry_test'] =
        'String connect_WiFi_and_load_Certificates() {\n' +
        '  String responseTo = "false";\n' +
        '  bool startupSuccess = Arrowhead.begin();\n' +
        '  if(startupSuccess){\n' +
        '    String response = "";\n' +
        '    int statusCode = Arrowhead.serviceRegistryEcho(&response);\n' +
        '    responseTo = "Ping status code from server: " + String(statusCode) + "\\n";\n' +
        '    responseTo += "Ping response body from server: " + String(response) + "\\n";\n' +
        '    statusCode = Arrowhead.serviceRegistryRegister(serviceRegistryEntry.c_str(), &response);\n' +
        '    responseTo += "Status code from server: " + String(statusCode) + "\\n";\n' +
        '    responseTo += "Response body from server: " + String(response) + "\\n";\n' +
        '    }\n' +
        '  return responseTo;\n' +
        '}';
    var code = 'connect_WiFi_and_load_Certificates()';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino['ahf_esp_SR_register_test'] = function (block) {
    Blockly.Arduino.userFunctions_['ahf_esp_connection_registry_test'] =
        'String connect_WiFi_and_load_Certificates() {\n' +
        '  String responseTo = "";\n' +
        '  bool startupSuccess = Arrowhead.begin();\n' +
        '  if(startupSuccess){\n' +
        '    String response = "";\n' +
        '    int statusCode = Arrowhead.serviceRegistryEcho(&response);\n' +
        '    responseTo = "Ping status code from server: " + String(statusCode);\n' +
        '    responseTo += "Ping response body from server: " + String(response);\n' +
        '    responseTo += "||";\n' +
        '    statusCode = Arrowhead.serviceRegistryRegister(serviceRegistryEntry.c_str(), &response);\n' +
        '    responseTo += "Status code from server: " + String(statusCode);\n' +
        '    responseTo += "Response body from server: " + String(response);\n' +
        '    }\n' +
        '  return responseTo;\n' +
        '}';
    var code = 'connect_WiFi_and_load_Certificates()';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino['ahf_esp_SR_unregister_test'] = function (block) {
    Blockly.Arduino.userFunctions_['ahf_esp_connection_registry_test'] =
        'String connect_WiFi_and_load_Certificates() {\n' +
        '  String responseTo = "";\n' +
        '  bool startupSuccess = Arrowhead.begin();\n' +
        '  if(startupSuccess){\n' +
        '    String response = "";\n' +
        '    int statusCode = Arrowhead.serviceRegistryEcho(&response);\n' +
        '    responseTo = "Ping status code from server: " + String(statusCode);\n' +
        '    responseTo += "Ping response body from server: " + String(response);\n' +
        '    responseTo += "||";\n' +
        '    statusCode = Arrowhead.serviceRegistryRegister(serviceRegistryEntry.c_str(), &response);\n' +
        '    responseTo += "Status code from server: " + String(statusCode);\n' +
        '    responseTo += "Response body from server: " + String(response);\n' +
        '    }\n' +
        '  return responseTo;\n' +
        '}';
    var code = 'connect_WiFi_and_load_Certificates()';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino['ahf_esp_format_data_SenML'] = function (block) {
    Blockly.Arduino.userFunctions_['ahf_esp_format_data_to_SenML'] =
        'void handleServiceRequest(float dataToFormat) {\n' +
        '  StaticJsonDocument<500> root;\n' +
        '  root["bn"]  = Arrowhead.getArrowheadESPFS().getProviderInfo().systemName;\n' +
        '  root["t"]  = epochTime;\n' +
        '  root["bu"]  = "celsius";\n' +
        '  root["ver"] = 1;\n' +
        '  JsonArray e = root.createNestedArray("e");\n' +
        '  JsonObject meas = e.createNestedObject();\n' +
        '  meas["n"] = Arrowhead.getArrowheadESPFS().getProviderInfo().systemName;\n' +
        '  meas["sv"] = (String)dataToFormat;\n' +
        '  String response;\n' +
        '  serializeJson(root, response);\n' +
        '  Arrowhead.getWebServer().send(200, "application/json", response); // or use getSecureWebServer()\n' +
        '}';
    var code = '';
    return '';
};

Blockly.Arduino['ahf_esp_keep_connection'] = function (block) {
    var code = 'Arrowhead.loop();\nyield();\n'
    return code;
};

Blockly.Arduino['ahf_custom_parameters'] = function (block) {
    var value_client_system_name = Blockly.Arduino.valueToCode(block, 'CLIENT_SYSTEM_NAME', Blockly.Arduino.ORDER_ATOMIC);
    var value_server_address = Blockly.Arduino.valueToCode(block, 'SERVER_ADDRESS', Blockly.Arduino.ORDER_ATOMIC);
    var value_server_port = Blockly.Arduino.valueToCode(block, 'SERVER_PORT', Blockly.Arduino.ORDER_ATOMIC);
    var value_sr_address = Blockly.Arduino.valueToCode(block, 'SR_ADDRESS', Blockly.Arduino.ORDER_ATOMIC);
    var value_sr_port = Blockly.Arduino.valueToCode(block, 'SR_PORT', Blockly.Arduino.ORDER_ATOMIC);
    var checkbox_server_ssl_enabled = block.getFieldValue('SERVER_SSL_ENABLED') == 'TRUE';
    var checkbox_token_security_filter_enabled = block.getFieldValue('TOKEN_SECURITY_FILTER_ENABLED') == 'TRUE';
    var value_server_ssl_key_store_type = Blockly.Arduino.valueToCode(block, 'SERVER_SSL_KEY_STORE_TYPE', Blockly.Arduino.ORDER_ATOMIC);
    var value_server_ssl_key_store_password = Blockly.Arduino.valueToCode(block, 'SERVER_SSL_KEY_STORE_PASSWORD', Blockly.Arduino.ORDER_ATOMIC);
    var value_server_ssl_key_alias = Blockly.Arduino.valueToCode(block, 'SERVER_SSL_KEY_ALIAS', Blockly.Arduino.ORDER_ATOMIC);
    var value_server_ssl_key_password = Blockly.Arduino.valueToCode(block, 'SERVER_SSL_KEY_PASSWORD', Blockly.Arduino.ORDER_ATOMIC);
    var value_server_ssl_client_auth = Blockly.Arduino.valueToCode(block, 'SERVER_SSL_CLIENT_AUTH', Blockly.Arduino.ORDER_ATOMIC);
    var value_server_ssl_trust_store_type = Blockly.Arduino.valueToCode(block, 'SERVER_SSL_TRUST_STORE_TYPE', Blockly.Arduino.ORDER_ATOMIC);
    var value_server_ssl_trust_store = Blockly.Arduino.valueToCode(block, 'SERVER_SSL_TRUST_STORE', Blockly.Arduino.ORDER_ATOMIC);
    var value_server_ssl_trust_store_password = Blockly.Arduino.valueToCode(block, 'SERVER_SSL_TRUST_STORE_PASSWORD', Blockly.Arduino.ORDER_ATOMIC);
    var code = ''
    return code;
};