/**
 * @license
 * Copyright 2020 Sébastien CANET
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Typed variable blocks for Blockly.
 * @author scanet@libreduc.cc (Sébastien CANET)
 * @author kamalhammi2@gmail.com (Kamal HAMMI)
 */

'use strict';

goog.provide('Blockly.Constants.Variables');

goog.require('Blockly');
goog.require('Blockly.Blocks');
goog.require('Blockly.FieldLabel');
goog.require('Blockly.FieldVariable');
goog.require('Blockly.Types');

Blockly.Blocks['variables_get'] = {
    /**
     * Block for variable getter, return value from variable.
     * @this Blockly.Block
     */
    init: function() {
        this.contextMenuMsg_ = Blockly.Msg.VARIABLES_GET_CREATE_SET;
        this.appendDummyInput()
            .appendField(new Blockly.FieldVariable(Blockly.Msg.VARIABLES_DEFAULT_NAME), 'VAR');
        this.setOutput(true);
        this.setTooltip(Blockly.Msg.VARIABLES_GET_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.VARIABLES_GET_HELPURL);
        this.setStyle('variable_blocks');
    },
    contextMenuType_: 'variables_set',
    /**
     * Add menu option to create getter/setter block for this setter/getter.
     * @param {!Array} options List of menu options to add to.
     * @this Blockly.Block
     */
    customContextMenu: function(options) {
        var option = {
            enabled: true
        };
        var name = this.getFieldValue('VAR');
        option.text = this.contextMenuMsg_.replace('%1', name);
        var xmlField = Blockly.utils.xml.createElement('field');
        xmlField.setAttribute('name', 'VAR');
        var xmlBlock = Blockly.utils.xml.createElement('block');
        xmlBlock.setAttribute('type', this.contextMenuType_);
        option.callback = Blockly.ContextMenu.callbackFactory(this, xmlBlock);
        options.push(option);
    },
    /**
     * @return {!string} Retrieves the type (stored in varType) of this block.
     * @this Blockly.Block
     */
    getBlockType: function() {
        return [Blockly.Types.UNDEF, this.getFieldValue('VAR')];
    },
    /**
     * Gets the stored type of the variable indicated in the argument. As only one
     * variable is stored in this block, no need to check input
     * @this Blockly.
     * @param {!string} varName Name of this block variable to check type.
     * @return {!string} String to indicate the type of this block.
     */
    getVarType: function(varName) {
        //return [Blockly.Types.UNDEF, this.getFieldValue('VAR')];
        return Blockly.Types.getChildBlockType(this)
    }
};

Blockly.Blocks['variables_set'] = {
    /**
     * Block for variable setter, set variable value to whatever is connected.
     * @this Blockly.Block
     */
    init: function() {
        this.contextMenuMsg_ = Blockly.Msg.VARIABLES_SET_CREATE_GET;
        this.appendValueInput("VALUE")
            .appendField(Blockly.Msg["VARIABLES_SET"].substring(0, Blockly.Msg["VARIABLES_SET"].indexOf('%1')))
            .appendField(new Blockly.FieldVariable(Blockly.Msg.VARIABLES_DEFAULT_NAME), 'VAR')
            .appendField(Blockly.Msg["VARIABLES_SET"].substring(Blockly.Msg["VARIABLES_SET"].indexOf('%1') + 2, Blockly.Msg["VARIABLES_SET"].indexOf('%2')));
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg.VARIABLES_SET_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.HELPURL);
        this.setStyle('variable_blocks');
    },
    contextMenuType_: 'variables_get',
    customContextMenu: Blockly.Blocks['variables_get'].customContextMenu,
    /**
     * Searches through the nested blocks to find a variable type.
     * @this Blockly.Block
     * @param {!string} varName Name of this block variable to check type.
     * @return {string} String to indicate the type of this block.
     */
    getVarType: function(varName) {
        return Blockly.Types.getChildBlockType(this);
    }
};

Blockly.Blocks['variables_set_scope'] = {
    /**
     * Block for variable'scope and value setter, set scope of variable to Globale or Locale and its value to whatever is connected.
     * @this Blockly.Block
     */
    init: function() {
        this.contextMenuMsg_ = Blockly.Msg.VARIABLES_SET_CREATE_GET;
        this.appendValueInput("VALUE")
            .appendField(Blockly.Msg["VARIABLES_SET"].substring(0, Blockly.Msg["VARIABLES_SET"].indexOf('%1')))
            .appendField(new Blockly.FieldVariable(Blockly.Msg.VARIABLES_DEFAULT_NAME), 'VAR')
            .appendField(Blockly.Msg.VARIABLES_AS)
            .appendField(new Blockly.FieldDropdown([
                [Blockly.Msg["VARIABLES_SET_SCOPE_GLOBAL"], "G"],
                [Blockly.Msg["VARIABLES_SET_SCOPE_LOCAL"], "L"]
            ]), "SCOPE")
            .appendField(Blockly.Msg["VARIABLES_SET"].substring(Blockly.Msg["VARIABLES_SET"].indexOf('%1') + 2, Blockly.Msg["VARIABLES_SET"].indexOf('%2')));
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg.VARIABLES_SET_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.HELPURL);
        this.setStyle('variable_blocks');
    },
    contextMenuType_: 'variables_get',
    customContextMenu: Blockly.Blocks['variables_get'].customContextMenu,
    /**
     * Searches through the nested blocks to find a variable type.
     * @this Blockly.Block
     * @param {!string} varName Name of this block variable to check type.
     * @return {string} String to indicate the type of this block.
     */
    getVarType: function(varName) {
        return Blockly.Types.getChildBlockType(this);
    }
};

Blockly.Blocks['variables_set_type'] = {
    /**
     * Block for variable casting.
     * @this Blockly.Block
     */
    init: function() {
        this.appendValueInput('VARIABLE_SETTYPE_INPUT');
        this.appendDummyInput()
            .appendField(Blockly.Msg.VARIABLES_AS)
            .appendField(new Blockly.FieldDropdown(
                Blockly.Types.getValidTypeArray()), 'VARIABLE_SETTYPE_TYPE');
        this.setInputsInline(true);
        this.setOutput(true);
        this.setTooltip('Sets a value to a specific type');
        this.setHelpUrl('http://arduino.cc/en/Reference/HomePage');
        this.setStyle('variable_blocks');
    },
    /**
     * Assigns a type to the block based on the selected type to cast.
     * @return {!string} Blockly type for this block configuration.
     * @this Blockly.Block
     */
    getBlockType: function() {
        var blocklyTypeKey = this.getFieldValue('VARIABLE_SETTYPE_TYPE');
        return Blockly.Types[blocklyTypeKey];
    }
};

Blockly.Blocks['variables_const'] = {
    init: function() {
        this.contextMenuMsg_ = Blockly.Msg.VARIABLES_SET_CREATE_GET;
        this.appendValueInput("VAL_CONST")
            .appendField(Blockly.Msg.VARIABLES_SET_CONST)
            .appendField(new Blockly.FieldVariable(Blockly.Msg.VARIABLES_DEFAULT_NAME), 'VAR')
            .appendField(Blockly.Msg.VARIABLES_SET_CONST_AT);
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg.VARIABLES_SET_CONST_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.VARIABLES_SET_CONST_HELPURL);
        this.setStyle('variable_blocks');
    },
    contextMenuType_: 'variables_get',
    customContextMenu: Blockly.Blocks['variables_get'].customContextMenu,
    getVarType: function(varName) {
        return Blockly.Types.getChildBlockType(this);
    }
};

Blockly.Blocks['variables_set_init'] = {
    init: function() {
        this.contextMenuMsg_ = Blockly.Msg.VARIABLES_SET_CREATE_GET;
        this.appendValueInput("VALUE")
            .appendField(Blockly.Msg.VARIABLES_SET_INIT)
            .appendField(new Blockly.FieldVariable(Blockly.Msg.VARIABLES_DEFAULT_NAME), 'VAR')
            .appendField(Blockly.Msg.VARIABLES_AS)
            .appendField(new Blockly.FieldDropdown(Blockly.Types.getValidTypeArray()), 'VARIABLE_SETTYPE_TYPE')
            .appendField(Blockly.Msg._AT);
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg.VARIABLES_SET_INIT_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.VARIABLES_SET_INIT_HELPURL);
        this.setStyle('variable_blocks');
    },
    contextMenuType_: 'variables_get',
    customContextMenu: Blockly.Blocks['variables_get'].customContextMenu,
    /**
     * Assigns a type to the block based on the selected type to cast.
     * @return {!string} Blockly type for this block configuration.
     * @this Blockly.Block
     */
    getVarType: function(varName) {
        var blocklyTypeKey = this.getFieldValue('VARIABLE_SETTYPE_TYPE');
        // this.setCheck(blocklyTypeKey);
        return Blockly.Types[blocklyTypeKey];
    }
};

Blockly.Blocks['variables_define'] = {
    init: function() {
        this.appendValueInput("VALUE")
            .appendField("define variable")
            .appendField(new Blockly.FieldVariable(Blockly.Msg.VARIABLES_DEFAULT_NAME), 'VAR')
            .appendField("as")
            // this.appendValueInput("TEXT1")
            //     .setAlign(Blockly.ALIGN_RIGHT)
            //     .appendField("define variable");
            // this.appendDummyInput()
            //     .appendField("as")
            //     .appendField(new Blockly.FieldTextInput(''), 'TEXT2');
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg.ARDUINO_BASE_DEFINE_CONST_TOOLTIP);
        this.setHelpUrl(Blockly.Msg.ARDUINO_BASE_DEFINE_CONST_HELPURL);
        this.setStyle('variable_blocks');
    }
};
