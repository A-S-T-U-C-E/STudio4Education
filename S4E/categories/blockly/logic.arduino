/**
 * @license
 * Copyright 2012 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Generating JavaScript for logic blocks.
 * @author q.neutron@gmail.com (Quynh Neutron)
 * @author for 1rst Arduino code release gasolin@gmail.com (Fred Lin)
 * @author for add-on scanet@libreduc.cc (SÃ©bastien CANET)
 */
'use strict';

goog.provide('Blockly.Arduino.Logic');

goog.require('Blockly.Arduino');

Blockly.Arduino.controls_if = function(block) {
    // If/elseif/else condition.
    var n = 0;
    let code = '',
        branchCode, conditionCode;
    // var conditionCode = Blockly.Arduino.valueToCode(block, 'IF' + n,
    //     Blockly.Arduino.ORDER_NONE) || 'false';
    // var branchCode = Blockly.Arduino.statementToCode(block, 'DO' + n);
    // let code = 'if (' + argument + ') {\n' + branch + '\n}';
    do {
        conditionCode = Blockly.Arduino.valueToCode(block, 'IF' + n,
            Blockly.Arduino.ORDER_NONE) || 'false';
        branchCode = Blockly.Arduino.statementToCode(block, 'DO' + n);
        code += (n > 0 ? ' else ' : '') +
            'if (' + conditionCode + ') {\n' + branchCode + '}';
        ++n;
    } while (block.getInput('IF' + n));

    if (block.getInput('ELSE')) {
        branchCode = Blockly.Arduino.statementToCode(block, 'ELSE');
        code += ' else {\n' + branchCode + '\n}';
    }
    return code + '\n';
};

Blockly.Arduino.logic_compare = function(block) {
    // Comparison operator.
    var mode = block.getFieldValue('OP');
    var operator = Blockly.Arduino.logic_compare.OPERATORS[mode];
    var order = (operator == '==' || operator == '!=') ?
        Blockly.Arduino.ORDER_EQUALITY : Blockly.Arduino.ORDER_RELATIONAL;
    var argument0 = Blockly.Arduino.valueToCode(block, 'A', order) || '0';
    var argument1 = Blockly.Arduino.valueToCode(block, 'B', order) || '0';
    let code = argument0 + ' ' + operator + ' ' + argument1;
    return [code, order];
};

Blockly.Arduino.logic_compare.OPERATORS = {
    EQ: '==',
    NEQ: '!=',
    LT: '<',
    LTE: '<=',
    GT: '>',
    GTE: '>='
};

Blockly.Arduino.logic_operation = function(block) {
    // Operations 'and', 'or'.
    var operator = (block.getFieldValue('OP') == 'AND') ? '&&' : '||';
    var order = (operator == '&&') ? Blockly.Arduino.ORDER_LOGICAL_AND :
        Blockly.Arduino.ORDER_LOGICAL_OR;
    var argument0 = Blockly.Arduino.valueToCode(block, 'A', order) || 'false';
    var argument1 = Blockly.Arduino.valueToCode(block, 'B', order) || 'false';
    let code = argument0 + ' ' + operator + ' ' + argument1;
    return [code, order];
};

Blockly.Arduino.logic_negate = function(block) {
    // Negation.
    var order = Blockly.Arduino.ORDER_UNARY_PREFIX;
    var argument0 = Blockly.Arduino.valueToCode(block, 'BOOL', order) || 'false';
    let code = '!' + argument0;
    return [code, order];
};

Blockly.Arduino.logic_boolean = function(block) {
    // Boolean values true and false.
    let code = (block.getFieldValue('BOOL') == 'TRUE') ? 'true' : 'false';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.logic_null = function(block) {
    let code = 'NULL';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.logic_ternary = function(block) {
    // Ternary operator.
    var value_if = Blockly.Arduino.valueToCode(block, 'IF',
        Blockly.Arduino.ORDER_CONDITIONAL) || 'false';
    var value_then = Blockly.Arduino.valueToCode(block, 'THEN',
        Blockly.Arduino.ORDER_CONDITIONAL) || 'null';
    var value_else = Blockly.Arduino.valueToCode(block, 'ELSE',
        Blockly.Arduino.ORDER_CONDITIONAL) || 'null';
    let code = '(' + value_if + ') ? ' + value_then + ' : ' + value_else;
    return [code, Blockly.Arduino.ORDER_CONDITIONAL];
};

Blockly.Arduino.controls_switch = function(block) {
    // switch/var/case/do/default function
    var n = 0;
    var switchvar = Blockly.Arduino.nameDB_.getName(block.getFieldValue('SWVAR'),
        Blockly.Variables.NAME_TYPE);
    var argument = Blockly.Arduino.valueToCode(block, 'CASE' + n,
        Blockly.Arduino.ORDER_NONE) || 'false';
    var branch = Blockly.Arduino.statementToCode(block, 'DO' + n);
    let code = 'switch (' + switchvar + ') {\n' +
        'case ' + argument + ': \n' + branch + '  break;\n';
    for (n = 1; n <= block.casebreakCount_; n++) {
        argument = Blockly.Arduino.valueToCode(block, 'CASE' + n,
            Blockly.Arduino.ORDER_NONE) || 'false';
        branch = Blockly.Arduino.statementToCode(block, 'DO' + n);
        code += ' case ' + argument + ': \n' + branch + '  break;\n';
    }
    if (block.defaultCount_) {
        branch = Blockly.Arduino.statementToCode(block, 'DEFAULT');
        code += ' default :\n' + branch + ' ';
    }
    code += '}'
    return code + '\n';
};