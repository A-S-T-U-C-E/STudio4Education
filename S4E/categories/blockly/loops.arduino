/**
 * @license
 * Copyright 2012 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Generating JavaScript for loop blocks.
 * @author fraser@google.com (Neil Fraser)
 * @author for 1rst Arduino code release gasolin@gmail.com (Fred Lin)
 * @author for add-on scanet@libreduc.cc (SÃ©bastien CANET)
 */

'use strict';

goog.provide('Blockly.Arduino.Loops');

goog.require('Blockly.Arduino');

Blockly.Arduino['controls_repeat_ext'] = function(block) {
    // Repeat n times.
    var repeats = Blockly.Arduino.valueToCode(this, 'TIMES',
        Blockly.Arduino.ORDER_ASSIGNMENT) || '0';
    var branch = Blockly.Arduino.statementToCode(this, 'DO');
    if (Blockly.Arduino.INFINITE_LOOP_TRAP) {
        branch = Blockly.Arduino.INFINITE_LOOP_TRAP.replace(/%1/g,
            '\'' + block.id + '\'') + branch;
    }
    var loopVar = Blockly.Arduino.nameDB_.getName('count', Blockly.Variables.NAME_TYPE);
    let code = 'for (int ' + loopVar + ' = 0; ' +
        loopVar + ' < ' + repeats + '; ' +
        loopVar + '++) {\n' +
        branch + '}\n';
    return code;
};

Blockly.Arduino['controls_repeat'] = function(block) {
    // Repeat n times.
    var repeats = block.getFieldValue('TIMES');
    var branch = Blockly.Arduino.statementToCode(this, 'DO');
    if (Blockly.Arduino.INFINITE_LOOP_TRAP) {
        branch = Blockly.Arduino.INFINITE_LOOP_TRAP.replace(/%1/g,
            '\'' + block.id + '\'') + branch;
    }
    var loopVar = Blockly.Arduino.nameDB_.getDistinctName(
        'count', Blockly.Variables.NAME_TYPE);
    let code = 'for (int ' + loopVar + ' = 0; ' +
        loopVar + ' < ' + repeats + '; ' +
        loopVar + '++) {\n' +
        branch + '}\n';
    return code;
};

Blockly.Arduino['controls_whileUntil'] = function(block) {
    // Do while/until loop.
    var argument0 = Blockly.Arduino.valueToCode(this, 'BOOL',
        Blockly.Arduino.ORDER_NONE) || 'false';
    var branch = Blockly.Arduino.statementToCode(this, 'DO');
    if (Blockly.Arduino.INFINITE_LOOP_TRAP) {
        branch = Blockly.Arduino.INFINITE_LOOP_TRAP.replace(/%1/g,
            '\'' + block.id + '\'') + branch;
    }
    if (block.getFieldValue('MODE') == 'UNTIL') {
        if (!argument0.match(/^\w+$/)) {
            argument0 = '(' + argument0 + ')';
        }
        argument0 = '!' + argument0;
    }
    return 'while (' + argument0 + ') {\n' + branch + '}\n';
};

Blockly.Arduino['controls_for'] = function(block) {
    var variable0 = Blockly.Arduino.nameDB_.getName(
        block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
    var argument0 = Blockly.Arduino.valueToCode(block, 'FROM',
        Blockly.Arduino.ORDER_ASSIGNMENT) || '0';
    var argument1 = Blockly.Arduino.valueToCode(block, 'TO',
        Blockly.Arduino.ORDER_ASSIGNMENT) || '0';
    var increment = Blockly.Arduino.valueToCode(block, 'BY',
        Blockly.Arduino.ORDER_ASSIGNMENT) || '1';
    var branch = Blockly.Arduino.statementToCode(block, 'DO');
    branch = Blockly.Arduino.addLoopTrap(branch, block.id);
    var code;
    if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) &&
        Blockly.isNumber(increment)) {
        // All arguments are simple numbers.
        var up = parseFloat(argument0) <= parseFloat(argument1);
        code = 'for (' + variable0 + ' = ' + argument0 + '; ' +
            variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' +
            variable0;
        var step = Math.abs(parseFloat(increment));
        if (step == 1) {
            code += up ? '++' : '--';
        } else {
            code += (up ? ' += ' : ' -= ') + step;
        }
        code += ') {\n' + branch + '}\n';
    } else {
        code = '';
        // Cache non-trivial values to variables to prevent repeated look-ups.
        var startVar = argument0;
        if (!argument0.match(/^\w+$/) && !Blockly.isNumber(argument0)) {
            var startVar = Blockly.Arduino.nameDB_.getDistinctName(
                variable0 + '_start', Blockly.Variables.NAME_TYPE);
            code += 'int ' + startVar + ' = ' + argument0 + ';\n';
        }
        var endVar = argument1;
        if (!argument1.match(/^\w+$/) && !Blockly.isNumber(argument1)) {
            var endVar = Blockly.Arduino.nameDB_.getDistinctName(
                variable0 + '_end', Blockly.Variables.NAME_TYPE);
            code += 'int ' + endVar + ' = ' + argument1 + ';\n';
        }
        // Determine loop direction at start, in case one of the bounds
        // changes during loop execution.
        var incVar = Blockly.Arduino.nameDB_.getDistinctName(
            variable0 + '_inc', Blockly.Variables.NAME_TYPE);
        code += 'int ' + incVar + ' = ';
        if (Blockly.isNumber(increment)) {
            code += Math.abs(increment) + ';\n';
        } else {
            code += 'abs(' + increment + ');\n';
        }
        code += 'if (' + startVar + ' > ' + endVar + ') {\n';
        code += Blockly.Arduino.INDENT + incVar + ' = -' + incVar + ';\n';
        code += '}\n';
        code += 'for (' + variable0 + ' = ' + startVar + ';\n' +
            '     ' + incVar + ' >= 0 ? ' +
            variable0 + ' <= ' + endVar + ' : ' +
            variable0 + ' >= ' + endVar + ';\n' +
            '     ' + variable0 + ' += ' + incVar + ') {\n' +
            branch + '}\n';
    }
    return code;
};

Blockly.Arduino['controls_forEach'] = function(block) {
    var variable = Blockly.Arduino.nameDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
    var arrayToParse = Blockly.Arduino.valueToCode(block, 'LIST',
        Blockly.Arduino.ORDER_ASSIGNMENT) || '0';
    var branchCode = Blockly.Arduino.statementToCode(block, 'DO');
    let code = 'for (' + variable + ' = 0; ' + variable + ' < (sizeof(' + arrayToParse + ') / sizeof(' + arrayToParse + '[0])); ' + variable + '++) {\n' +
        branchCode + '\n' +
        '}\n';
    return code;
};

Blockly.Arduino['controls_flow_statements'] = function(block) {
    // Flow statements: continue, break.
    switch (block.getFieldValue('FLOW')) {
        case 'BREAK':
            return 'break;\n';
        case 'CONTINUE':
            return 'continue;\n';
    }
    throw 'Unknown flow statement.';
};