/**
 * @license
 * Copyright 2012 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Generating JavaScript for math blocks.
 * @author q.neutron@gmail.com (Quynh Neutron)
 * @author for 1rst Arduino code release gasolin@gmail.com (Fred Lin)
 * @author for add-on scanet@libreduc.cc (SÃ©bastien CANET)
 */

'use strict';

goog.provide('Blockly.Arduino.Math');

goog.require('Blockly.Arduino');

Blockly.Arduino['math_number'] = function(block) {
    // Numeric value.
    var code = window.parseFloat(block.getFieldValue('NUM'));
    // -4 is actually an operator and a number.  Reflect block in the order.
    var order = code < 0 ?
        Blockly.Arduino.ORDER_UNARY_PREFIX : Blockly.Arduino.ORDER_ATOMIC;
    return [code, order];
};

Blockly.Arduino['inout_angle_maths'] = function() {
    // Just angle
    var angle = this.getFieldValue('ANGLE');
    return [angle, Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino['math_arithmetic'] = function(block) {
    // Basic arithmetic operators, and power.
    var mode = block.getFieldValue('OP');
    var tuple = Blockly.Arduino.math_arithmetic.OPERATORS[mode];
    var operator = tuple[0];
    var order = tuple[1];
    var argument0 = Blockly.Arduino.valueToCode(block, 'A', order) || '0';
    var argument1 = Blockly.Arduino.valueToCode(block, 'B', order) || '0';
    var code;
    if (!operator) {
        code = 'pow(' + argument0 + ', ' + argument1 + ')';
        return [code, Blockly.Arduino.ORDER_UNARY_POSTFIX];
    }
    code = argument0 + operator + argument1;
    return [code, order];
};

Blockly.Arduino['math_interval'] = function(block) {
    var OPERATORS = {
        'LT': '<',
        'LTE': '<=',
        'GT': '>',
        'GTE': '>='
    };
    var value_inf = Blockly.Arduino.valueToCode(block, 'inf', Blockly.Arduino.ORDER_ATOMIC);
    var dropdown_comp_inf = OPERATORS[block.getFieldValue('comp_inf')];
    var value_valeur = Blockly.Arduino.valueToCode(block, 'valeur', Blockly.Arduino.ORDER_ATOMIC);
    var dropdown_comp_sup = OPERATORS[block.getFieldValue('comp_sup')];
    var value_sup = Blockly.Arduino.valueToCode(block, 'sup', Blockly.Arduino.ORDER_ATOMIC);
    var code = '(( ' + value_inf + ' ' + dropdown_comp_inf + ' ' + value_valeur + ') && (' + value_valeur + ' ' + dropdown_comp_sup + ' ' + value_sup + '))';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino['math_arithmetic'].OPERATORS = {
    ADD: [' + ', Blockly.Arduino.ORDER_ADDITIVE],
    MINUS: [' - ', Blockly.Arduino.ORDER_ADDITIVE],
    MULTIPLY: [' * ', Blockly.Arduino.ORDER_MULTIPLICATIVE],
    DIVIDE: [' / ', Blockly.Arduino.ORDER_MULTIPLICATIVE],
    POWER: [null, Blockly.Arduino.ORDER_NONE] // Handle power separately.
};

Blockly.Arduino['math_single'] = function(block) {
    // Math operators with single operand.
    var operator = block.getFieldValue('OP');
    var code;
    var arg;
    if (operator == 'NEG') {
        // Negation is a special case given its different operator precedence.
        // arg = Blockly.Arduino.valueToCode(block, 'NUM', Blockly.Arduino.ORDER_UNARY_NEGATION) || '0';
        arg = Blockly.Arduino.valueToCode(block, 'NUM', Blockly.Arduino.ORDER_ATOMIC);
        if (arg[0] == '-') {
            arg = ' ' + arg;
        }
        code = '-' + arg;
        return [code, Blockly.Arduino.ORDER_UNARY_NEGATION];
    }
    // if (operator == 'SIN' || operator == 'COS' || operator == 'TAN') {
    //     arg = Blockly.Arduino.valueToCode(block, 'NUM', Blockly.Arduino.ORDER_ATOMIC) || '0';
    // } else {
    //     arg = Blockly.Arduino.valueToCode(block, 'NUM',
    //         Blockly.Arduino.ORDER_ATOMIC) || '0';
    // }
    arg = Blockly.Arduino.valueToCode(block, 'NUM', Blockly.Arduino.ORDER_ATOMIC) || '0';
    // First, handle cases which generate values that don't need parentheses
    // wrapping the code.
    switch (operator) {
        case 'ROOT':
            code = 'sqrt(' + arg + ')';
            break;
        case 'ABS':
            code = 'abs(' + arg + ')';
            break;
        case 'LN':
            code = 'log(' + arg + ')';
            break;
        case 'EXP':
            code = 'exp(' + arg + ')';
            break;
        case 'LOG10':
            code = 'log10(' + arg + ')';
            break;
        case 'POW10':
            code = 'pow(10, ' + arg + ')';
            break;
        case 'ROUND':
            code = 'round(' + arg + ')';
            break;
        case 'ROUNDUP':
            code = '(ceil)(' + arg + ')';
            break;
        case 'ROUNDDOWN':
            code = '(floor)(' + arg + ')';
            break;
        case 'SIN':
            code = 'sin(' + arg + ')';
            break;
        case 'COS':
            code = 'cos(' + arg + ')';
            break;
        case 'TAN':
            code = 'tan(' + arg + ')';
            break;
        case 'ASIN':
            code = 'asin(' + arg + ')';
            break;
        case 'ACOS':
            code = 'acos(' + arg + ')';
            break;
        case 'ATAN':
            code = 'atan(' + arg + ')';
            break;
        default:
            throw 'Unknown math operator: ' + operator;
    }
    if (code) {
        return [code, Blockly.Arduino.ORDER_ATOMIC];
    }
    return [code, Blockly.Arduino.ORDER_DIVISION];
};

Blockly.Arduino['math_constant'] = function(block) {
    // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.
    var CONSTANTS = {
        'PI': ['PI', Blockly.Arduino.ORDER_MEMBER],
        'E': ['M_E', Blockly.Arduino.ORDER_MEMBER],
        'GOLDEN_RATIO': ['(1 + sqrt(5)) / 2', Blockly.Arduino.ORDER_MEMBER],
        'SQRT2': ['sqrt(2)', Blockly.Arduino.ORDER_MEMBER],
        'SQRT1_2': ['sqrt(1/2)', Blockly.Arduino.ORDER_MEMBER]
    };
    return CONSTANTS[block.getFieldValue('CONSTANT')];
};

Blockly.Arduino['math_number_property'] = function(block) {
    // Check if a number is even, odd, prime, whole, positive, or negative
    // or if it is divisible by certain number. Returns true or false.
    var number_to_check = Blockly.Arduino.valueToCode(block, 'NUMBER_TO_CHECK', Blockly.Arduino.ORDER_ATOMIC) || '0';
    var dropdown_property = block.getFieldValue('PROPERTY');
    var code;
    if (dropdown_property == 'PRIME') {
        // Prime is a special case as it is not a one-liner test.
        var functionName = Blockly.Arduino.provideFunction_(
            'math_isPrime', ['function ' + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ + '(n) {',
                '  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods',
                '  if (n == 2 || n == 3) {',
                '    return true;',
                '  }',
                '  // False if n is NaN, negative, is 1, or not whole.',
                '  // And false if n is divisible by 2 or 3.',
                '  if (isNaN(n) || n <= 1 || n % 1 != 0 || n % 2 == 0 ||' +
                ' n % 3 == 0) {',
                '    return false;',
                '  }',
                '  // Check all the numbers of form 6k +/- 1, up to sqrt(n).',
                '  for (var x = 6; x <= sqrt(n) + 1; x += 6) {',
                '    if (n % (x - 1) == 0 || n % (x + 1) == 0) {',
                '      return false;',
                '    }',
                '  }',
                '  return true;',
                '}'
            ]);
        code = functionName + '(' + number_to_check + ')';
        return [code, Blockly.Arduino.ORDER_ATOMIC];
    }
    switch (dropdown_property) {
        case 'EVEN':
            code = '(' + number_to_check + ' % 2 == 0)';
            break;
        case 'ODD':
            code = '(' + number_to_check + ' % 2 == 1)';
            break;
        case 'WHOLE':
            code = '(' + number_to_check + ' % 1 == 0)';
            break;
        case 'POSITIVE':
            code = '(' + number_to_check + ' > 0)';
            break;
        case 'NEGATIVE':
            code = '(' + number_to_check + ' < 0)';
            break;
        case 'DIVISIBLE_BY':
            var divisor = Blockly.Arduino.valueToCode(block, 'DIVISOR', Blockly.Arduino.ORDER_ATOMIC) || '0';
            code = '(' + number_to_check + ' % ' + divisor + ' == 0)';
            break;
    }
    return [code, Blockly.Arduino.ORDER_EQUALITY];
};

Blockly.Arduino['math_change'] = function(block) {
    // Add to a variable in place.
    var argument0 = Blockly.Arduino.valueToCode(block, 'DELTA', Blockly.Arduino.ORDER_ADDITIVE) || '0';
    var varName = Blockly.Arduino.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
    var code = varName + ' = ' + varName + ' + ' + argument0 + ';\n';
    return code;
};

// Rounding functions have a single operand.
Blockly.Arduino['math_round'] = Blockly.Arduino['math_single'];

// Trigonometry functions have a single operand.
Blockly.Arduino['math_trig'] = Blockly.Arduino['math_single'];

Blockly.Arduino['math_on_list'] = function(block) {
    // Math functions for lists.
    var func = block.getFieldValue('OP');
    var list,
        code;
    switch (func) {
        case 'SUM':
            list = Blockly.Arduino.valueToCode(block, 'LIST',
                Blockly.Arduino.ORDER_MEMBER) || '[]';
            code = list + '.reduce(function(x, y) {return x + y;})';
            break;
        case 'MIN':
            list = Blockly.Arduino.valueToCode(block, 'LIST',
                Blockly.Arduino.ORDER_COMMA) || '[]';
            code = 'min.apply(null, ' + list + ')';
            break;
        case 'MAX':
            list = Blockly.Arduino.valueToCode(block, 'LIST',
                Blockly.Arduino.ORDER_COMMA) || '[]';
            code = 'max.apply(null, ' + list + ')';
            break;
        case 'AVERAGE':
            // math_median([null,null,1,3]) == 2.0.
            var functionName = Blockly.Arduino.provideFunction_(
                'math_mean', ['function ' + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ +
                    '(myList) {',
                    '  return myList.reduce(function(x, y) {return x + y;}) / ' +
                    'myList.length;',
                    '}'
                ]);
            list = Blockly.Arduino.valueToCode(block, 'LIST',
                Blockly.Arduino.ORDER_NONE) || '[]';
            code = functionName + '(' + list + ')';
            break;
        case 'MEDIAN':
            // math_median([null,null,1,3]) == 2.0.
            var functionName = Blockly.Arduino.provideFunction_(
                'math_median', ['function ' + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ +
                    '(myList) {',
                    '  var localList = myList.filter(function (x) ' +
                    '{return typeof x == \'number\';});',
                    '  if (!localList.length) return null;',
                    '  localList.sort(function(a, b) {return b - a;});',
                    '  if (localList.length % 2 == 0) {',
                    '    return (localList[localList.length / 2 - 1] + ' +
                    'localList[localList.length / 2]) / 2;',
                    '  } else {',
                    '    return localList[(localList.length - 1) / 2];',
                    '  }',
                    '}'
                ]);
            list = Blockly.Arduino.valueToCode(block, 'LIST',
                Blockly.Arduino.ORDER_NONE) || '[]';
            code = functionName + '(' + list + ')';
            break;
        case 'MODE':
            // As a list of numbers can contain more than one mode,
            // the returned result is provided as an array.
            // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1].
            var functionName = Blockly.Arduino.provideFunction_(
                'math_modes', ['function ' + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ +
                    '(values) {',
                    '  var modes = [];',
                    '  var counts = [];',
                    '  var maxCount = 0;',
                    '  for (var i = 0; i < values.length; i++) {',
                    '    var value = values[i];',
                    '    var found = false;',
                    '    var blockCount;',
                    '    for (var j = 0; j < counts.length; j++) {',
                    '      if (counts[j][0] === value) {',
                    '        blockCount = ++counts[j][1];',
                    '        found = true;',
                    '        break;',
                    '      }',
                    '    }',
                    '    if (!found) {',
                    '      counts.push([value, 1]);',
                    '      blockCount = 1;',
                    '    }',
                    '    maxCount = max(blockCount, maxCount);',
                    '  }',
                    '  for (var j = 0; j < counts.length; j++) {',
                    '    if (counts[j][1] == maxCount) {',
                    '        modes.push(counts[j][0]);',
                    '    }',
                    '  }',
                    '  return modes;',
                    '}'
                ]);
            list = Blockly.Arduino.valueToCode(block, 'LIST',
                Blockly.Arduino.ORDER_NONE) || '[]';
            code = functionName + '(' + list + ')';
            break;
        case 'STD_DEV':
            var functionName = Blockly.Arduino.provideFunction_(
                'math_standard_deviation', ['function ' + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ +
                    '(numbers) {',
                    '  var n = numbers.length;',
                    '  if (!n) return null;',
                    '  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;',
                    '  var variance = 0;',
                    '  for (var j = 0; j < n; j++) {',
                    '    variance += pow(numbers[j] - mean, 2);',
                    '  }',
                    '  variance = variance / n;',
                    '  return sqrt(variance);',
                    '}'
                ]);
            list = Blockly.Arduino.valueToCode(block, 'LIST',
                Blockly.Arduino.ORDER_NONE) || '[]';
            code = functionName + '(' + list + ')';
            break;
        case 'RANDOM':
            var functionName = Blockly.Arduino.provideFunction_(
                'math_random_list', ['function ' + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ +
                    '(list) {',
                    '  var x = floor(random() * list.length);',
                    '  return list[x];',
                    '}'
                ]);
            list = Blockly.Arduino.valueToCode(block, 'LIST',
                Blockly.Arduino.ORDER_NONE) || '[]';
            code = functionName + '(' + list + ')';
            break;
        default:
            throw 'Unknown operator: ' + func;
    }
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino['math_modulo'] = function(block) {
    // Remainder computation.
    var argument0 = Blockly.Arduino.valueToCode(block, 'DIVIDEND', Blockly.Arduino.ORDER_ATOMIC) || '0';
    var argument1 = Blockly.Arduino.valueToCode(block, 'DIVISOR', Blockly.Arduino.ORDER_ATOMIC) || '0';
    var code = '(' + argument0 + ' % ' + argument1 + ')';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino['math_constrain'] = function(block) {
    // Constrain a number between two limits.
    var argument0 = Blockly.Arduino.valueToCode(block, 'VALUE',
        Blockly.Arduino.ORDER_COMMA) || '0';
    var argument1 = Blockly.Arduino.valueToCode(block, 'LOW',
        Blockly.Arduino.ORDER_COMMA) || '0';
    var argument2 = Blockly.Arduino.valueToCode(block, 'HIGH',
        Blockly.Arduino.ORDER_COMMA) || 'Infinity';
    var code = 'min(max(' + argument0 + ', ' + argument1 + '), ' +
        argument2 + ')';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino['math_random_int'] = function(block) {
    // Random integer between [X] and [Y].
    var argument0 = Blockly.Arduino.valueToCode(block, 'FROM',
        Blockly.Arduino.ORDER_COMMA) || '0';
    var argument1 = Blockly.Arduino.valueToCode(block, 'TO',
        Blockly.Arduino.ORDER_COMMA) || '0';
    var functionName = Blockly.Arduino.provideFunction_(
        'math_random_int', ['long ' + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ +
            '(int a,int b) {',
            '  if (a > b) {',
            '    // Swap a and b to ensure a is smaller.',
            '    int c = a;',
            '    a = b;',
            '    b = c;',
            '  }',
            '  return random(a,b);',
            '}'
        ]);
    var code = functionName + '(' + argument0 + ', ' + argument1 + ')';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino['math_random_float'] = function(block) {
    // Random fraction between 0 and 1.
    var functionName = Blockly.Arduino.provideFunction_(
        'math_random_float', ['float ' + Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_ +
            '() {',
            '  return random(0, 1000000)/1000000;',
            '}\n'
        ]);
    return ['math_random_float()', Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino['math_atan2'] = function(block) {
    var value_X = Blockly.Arduino.valueToCode(block, 'X', Blockly.Arduino.ORDER_COMMA) || '0';
    var value_Y = Blockly.Arduino.valueToCode(block, 'Y', Blockly.Arduino.ORDER_COMMA) || '0';
    var code = 'atan2(' + value_X + ', ' + value_Y + ')';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};