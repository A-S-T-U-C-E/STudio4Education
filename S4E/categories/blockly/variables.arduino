/**
 * @license
 * Copyright 2020 Sébastien CANET
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Generating Arduino code for typed variable.
 * @author scanet@libreduc.cc (Sébastien CANET)
 */

'use strict';

goog.provide('Blockly.Arduino.Variables');

goog.require('Blockly.Arduino');

Blockly.Arduino['variables_get'] = function(block) {
    let code = Blockly.Arduino.nameDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino['variables_set'] = function(block) {
    var argument0 = Blockly.Arduino.valueToCode(block, 'VALUE', Blockly.Arduino.ORDER_ASSIGNMENT) || '0';
    var varName = Blockly.Arduino.nameDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
    return (varName + ' = ' + argument0 + ';\n');
};


Blockly.Arduino['variables_set_scope'] = function(block) {
	console.log("block");
    var argument0 = Blockly.Arduino.valueToCode(block, 'VALUE', Blockly.Arduino.ORDER_ASSIGNMENT) || '0';
    var varName = Blockly.Arduino.nameDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
    var result = varName + ' = ' + argument0 + ';\n';
    var scope = block.getFieldValue('SCOPE');
		      
    if (scope && scope.startsWith('L') && Blockly.Arduino.TypeVarLocalFun[varName]) {
    	console.log("L");
	    for (var i = 0; i < Blockly.Arduino.TypeVarLocalFun[varName].length; i++){
    	console.log("for");	 
    	   
	    	var varType = Blockly.Arduino.TypeVarLocalFun[varName][i][0];
	    	var varProc = Blockly.Arduino.TypeVarLocalFun[varName][i][1];
	    	var scope = Blockly.Arduino.TypeVarLocalFun[varName][i][2];
	    	var idBlock = Blockly.Arduino.TypeVarLocalFun[varName][i][3];
	    	
    	console.log(varType);
    	console.log(block.getRootBlock().id);
    	console.log(varProc);
    	console.log(scope);
    	console.log(idBlock);
    	console.log(block.id);
    		var collisionLabel = "collision of a local and argument of a function";
		      block.setWarningText(null,
		      collisionLabel);
	    	if ((block.getRootBlock().id === varProc) && (scope === "arg")){
	    		var collisionLabel = "collision of a local and argument of a function";
		      block.setWarningText("You are trying to set a local variable with the same name as an argument of this function",
		      collisionLabel);
              }
              		
		    if (block.id === idBlock){
		    	var collisionLabel = "collision of a local variables";
			block.setWarningText(null,
		      collisionLabel);
		    	if (varType){
			    	result = varType + ' '+ result;
			 }
		    }else if(scope === "local"){
    			var collisionLabel = "collision of a local variables";
			      block.setWarningText("You are trying to set a local variable with the same name as a local variable already registred",
			      collisionLabel);
			}
		
	    
	   }
	}
    return result;
};

Blockly.Arduino['variables_set_type'] = function(block) {
    var argument0 = Blockly.Arduino.valueToCode(block, 'VARIABLE_SETTYPE_INPUT', Blockly.Arduino.ORDER_ASSIGNMENT) || '0';
    var varType = Blockly.Arduino.getArduinoType_(Blockly.Types[block.getFieldValue('VARIABLE_SETTYPE_TYPE')]);
    let code = '(' + varType + ')(' + argument0 + ')';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino['variables_const'] = function(block) {
    var argument0 = Blockly.Arduino.valueToCode(block, 'VALUE', Blockly.Arduino.ORDER_ASSIGNMENT) || '0';
    var varName = Blockly.Arduino.nameDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
    var typeBlock = Blockly.Arduino.getArduinoType_(Blockly.Types.getChildBlockType(block));
    Blockly.Arduino.variables_[block.getFieldValue('VAR')] = 'const ' + typeBlock + ' ' + varName + ' = ' + argument0 + ';';
    return '';
};

Blockly.Arduino['variables_set_init'] = function(block) {
    var argument0 = Blockly.Arduino.valueToCode(block, 'VALUE', Blockly.Arduino.ORDER_ASSIGNMENT) || '0';
    var varName = Blockly.Arduino.nameDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
    var varType = Blockly.Arduino.getArduinoType_(Blockly.Types[block.getFieldValue('VARIABLE_SETTYPE_TYPE')]);
    Blockly.Arduino.variables_[block.getFieldValue('VAR')] = varType + ' ' + varName + ' = ' + argument0 + ';';
    return '';
};

Blockly.Arduino['variables_define'] = function(block) {
    var argument0 = Blockly.Arduino.valueToCode(block, 'VALUE', Blockly.Arduino.ORDER_ASSIGNMENT) || '0';
    var varName = Blockly.Arduino.nameDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
    Blockly.Arduino.variables_[block.getFieldValue('VAR')] = '#define ' + varName + ' ' + argument0;
    return "";
};
