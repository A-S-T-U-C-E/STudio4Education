/**
 * @license
 * Copyright 2020 Sébastien CANET
 * SPDX-License-Identifier: BSD-3-Clause
 */

/**
 * @fileoverview DHT temperature & humidity sensors blocks for Blockly.
 * @author scanet@libreduc.cc (Sébastien Canet)
 */

'use strict';

goog.provide('Blockly.Arduino.WIFI_ESP_SERVER');

goog.require('Blockly.Arduino');

Blockly.Arduino['WIFI_ESP_SERVER_SERVER_DEFINE'] = function(block) {
    var checkbox = block.getFieldValue('NAME') === 'TRUE';
    var value_name = Blockly.Arduino.valueToCode(block, 'NAME', Blockly.Arduino.ORDER_ATOMIC);
    var value_port = Blockly.Arduino.valueToCode(block, 'PORT', Blockly.Arduino.ORDER_ATOMIC);
    if (checkbox)
        Blockly.Arduino.includes_['WIFI_ESP_SERVER'] = '#include <ESP8266WiFi.h>\n' +
        '#include <WiFiClient.h>\n' +
        '#include <ESP8266WebServer.h>\n' +
        '#include <ESP8266mDNS.h>\n';
    Blockly.Arduino.definitions_['WIFI_ESP_SERVER_server_' + value_port] = 'ESP8266WebServer ' + value_name.substring(1).slice(0, -1) + '(' + value_port + ');';
    return '';
};

Blockly.Arduino['WIFI_ESP_SERVER_SERVER_BEGIN'] = function(block) {
    var value_name = Blockly.Arduino.valueToCode(block, 'NAME', Blockly.Arduino.ORDER_ATOMIC);
    value_name = value_name.replace('"', '').replace('"', '');
    let code = value_name + '.begin();\n';
    return code;
};

Blockly.Arduino['WIFI_ESP_SERVER_WIFI_BEGIN'] = function(block) {
    var value_ssid = Blockly.Arduino.valueToCode(block, 'SSID', Blockly.Arduino.ORDER_ATOMIC);
    var value_pass = Blockly.Arduino.valueToCode(block, 'PASS', Blockly.Arduino.ORDER_ATOMIC);
    let code = 'while (status != WL_CONNECTED) {\n' +
        '  Serial.println("Connect to WPA/WPA2 network");\n' +
        '  status = WiFi.begin(' + value_ssid + ', ' + value_pass + ');\n' +
        '}\n';
    return code;
};

Blockly.Arduino['WIFI_ESP_SERVER_SERVER_SEND'] = function(block) {
    var value_server_name = Blockly.Arduino.valueToCode(block, 'SERVER_NAME', Blockly.Arduino.ORDER_ATOMIC);
    var value_code = Blockly.Arduino.valueToCode(block, 'CODE', Blockly.Arduino.ORDER_ATOMIC);
    var value_content_type = Blockly.Arduino.valueToCode(block, 'CONTENT_TYPE', Blockly.Arduino.ORDER_ATOMIC);
    var value_content = Blockly.Arduino.valueToCode(block, 'CONTENT', Blockly.Arduino.ORDER_ATOMIC);
    let code = value_server_name.replace('"', '').replace('"', '') + '.send(' + value_code + ', ' + value_content_type + ', ' + value_content + ');\n';
    return code;
};

Blockly.Arduino['WIFI_ESP_SERVER_SERVER_ON'] = function(block) {
    var value_server_name = Blockly.Arduino.valueToCode(block, 'SERVER_NAME', Blockly.Arduino.ORDER_ATOMIC);
    var value_client_request = Blockly.Arduino.valueToCode(block, 'CLIENT_REQUEST', Blockly.Arduino.ORDER_ATOMIC);
    var statements_handler = Blockly.Arduino.statementToCode(block, 'HANDLER');
    let code = value_server_name.replace('"', '').replace('"', '') + '.on(' + value_client_request + ', []() {\n' + statements_handler + '});\n ';
    return code;
};

Blockly.Arduino['WIFI_ESP_SERVER_SERVER_ON_HANDLER'] = function(block) {
    var value_server_name = Blockly.Arduino.valueToCode(block, 'SERVER_NAME', Blockly.Arduino.ORDER_ATOMIC);
    var value_client_request = Blockly.Arduino.valueToCode(block, 'CLIENT_REQUEST', Blockly.Arduino.ORDER_ATOMIC);
    var value_handler = Blockly.Arduino.valueToCode(block, 'HANDLER', Blockly.Arduino.ORDER_ATOMIC);
    let code = value_server_name.replace('"', '').replace('"', '') + '.on(' + value_client_request + ', ' + value_handler + ');\n ';
    return code;
};

Blockly.Arduino['WIFI_ESP_SERVER_LOCALIP'] = function(block) {
    let code = 'String() + WiFi.localIP()[0] + "." + WiFi.localIP()[1] + "." + WiFi.localIP()[2] + "." + WiFi.localIP()[3]';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino['WIFI_ESP_SERVER_SSID'] = function(block) {
    let code = 'WiFi.SSID()';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino['WIFI_ESP_SERVER_CLIENT_ACCEPT'] = function(block) {
    var value_name = Blockly.Arduino.valueToCode(block, 'NAME', Blockly.Arduino.ORDER_ATOMIC);
    value_name = value_name.replace('"', '').replace('"', '');
    let code = 'WiFiEspClient client = ' + value_name + '.accept();\n';
    return code;
};

Blockly.Arduino['WIFI_ESP_SERVER_CLIENT_AVAILABLE'] = function(block) {
    let code = 'client.available()';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino['WIFI_ESP_SERVER_CLIENT_HANDLE'] = function(block) {
    var value_name = Blockly.Arduino.valueToCode(block, 'NAME', Blockly.Arduino.ORDER_ATOMIC);
    value_name = value_name.replace('"', '').replace('"', '');
    let code = value_name + '.handleClient();\n';
    return code;
};

Blockly.Arduino['WIFI_ESP_SERVER_SERVER_CLIENT_OBJECT'] = function(block) {
    let code = 'client';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino['WIFI_ESP_SERVER_CLIENT_CONNECTED'] = function(block) {
    let code = 'client.connected()';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};


Blockly.Arduino['WIFI_ESP_SERVER_CLIENT_READ'] = function(block) {
    let code = 'client.read()';
    return [code, Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino['WIFI_ESP_SERVER_CLIENT_STOP'] = function(block) {
    let code = 'client.stop();\n';
    return code;
};

Blockly.Arduino['WIFI_ESP_SERVER_CLIENT_PRINT'] = function(block) {
    var value_name = Blockly.Arduino.valueToCode(block, 'NAME', Blockly.Arduino.ORDER_ATOMIC);
    value_name = value_name.replaceAll(/\\\\/g, '\\');
    let code = 'client.print(' + value_name + ');\n';
    return code;
};

Blockly.Arduino['WIFI_ESP_SERVER_CLIENT_PRINT_MULTILINETEXTINPUT'] = function(block) {
    var value_name = block.getFieldValue('NAME');
    value_name = '"' + value_name.replaceAll('\n', '" + "') + '"';
    value_name = value_name.replaceAll(/\\\\/g, '\\');
    let code = 'client.print(' + value_name + ');\n';
    return code;
};