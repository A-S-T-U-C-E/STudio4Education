/**
 * @license
 * Copyright 2012 Fred Lin
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Servomotor blocks for Blockly.
 * @author gasolin@gmail.com (Fred Lin)
 * @author scanet@libreduc.cc (SÃ©bastien Canet)
 */

'use strict';

goog.provide('Blockly.Constants.servo');

goog.require('Blockly');
goog.require('Blockly.Blocks');
goog.require('Blockly.Types');

const servoMediaFolder = "./S4E/categories/servo/";


Blockly.Blocks['SERVO_ATTACH'] = {
    init: function() {
        this.appendDummyInput("")
            .appendField(Blockly.Msg.SERVO_ATTACH1)
            .appendField(new Blockly.FieldImage(servoMediaFolder + "servo.jpg", Code.imageSize, Code.imageSize));
		var fi = undefined;
		
		var names = Blockly.Arduino.InstanceTypeWithNames['Servo'];
		if (names){
			var newName = names[0][0];
		    fi = new Blockly.FieldInstance('Servo', newName, false, false, false);
			var len = fi.menuGenerator_.length;
			fi.menuGenerator_ = names.concat([fi.menuGenerator_[len-2],fi.menuGenerator_[len-1]]);
		}else{
			fi = new Blockly.FieldInstance('Servo', 'SERVOMOT', false, false, false);
			Blockly.Arduino.InstanceTypeWithNames['Servo'] = [];
			Blockly.Arduino.InstanceTypeWithNames['Servo'].push(['SERVOMOT','SERVOMOT']);
		}
        this.appendDummyInput("")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField(Blockly.Msg.SERVO_ATTACH2)
            .appendField(fi, 'SERVO_INSTANCE_NAME');
        this.appendValueInput("PIN")
            .setCheck('Number')
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField(Blockly.Msg.SERVO_PIN);
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg["SERVO_MOVE_TOOLTIP"]);
        this.setHelpUrl(Blockly.Msg["SERVO_MOVE_HELPURL"]);
        this.setStyle('servo_blocks');
    }
};

Blockly.Blocks['SERVO_MOVE_EXTERNAL'] = {
    init: function() {
        this.appendDummyInput()
            .appendField(Blockly.Msg["SERVO_MOVE_INPUT"])
            .appendField(new Blockly.FieldImage(servoMediaFolder + "servo.jpg", Code.imageSize, Code.imageSize));
        	var fi = undefined;
		
		var names = Blockly.Arduino.InstanceTypeWithNames['Servo'];
		if (names){
			var newName = names[0][0];
		    fi = new Blockly.FieldInstance('Servo', newName, false, false, false);
			var len = fi.menuGenerator_.length;
			fi.menuGenerator_ = names.concat([fi.menuGenerator_[len-2],fi.menuGenerator_[len-1]]);
		}else{
			fi = new Blockly.FieldInstance('Servo', 'SERVOMOT', false, false, false);
			Blockly.Arduino.InstanceTypeWithNames['Servo'] = [];
			Blockly.Arduino.InstanceTypeWithNames['Servo'].push(['SERVOMOT','SERVOMOT']);
		}
	this.appendDummyInput("")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField(Blockly.Msg.SERVO_ATTACH2)
            .appendField(fi, 'SERVO_INSTANCE_NAME');
        this.appendValueInput("DEGREE")
            .setCheck('Number')
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField(Blockly.Msg["SERVO_MOVE_DEGREE"]);
        this.setInputsInline(false);
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg["SERVO_MOVE_TOOLTIP"]);
        this.setHelpUrl(Blockly.Msg["SERVO_MOVE_HELPURL"]);
        this.setStyle('servo_blocks');
    }
};

Blockly.Blocks['SERVO_MOVE_SLIDER'] = {
    init: function() {
        this.appendDummyInput()
            .appendField(Blockly.Msg["SERVO_MOVE_INPUT"])
            .appendField(new Blockly.FieldImage(servoMediaFolder + "servo.jpg", Code.imageSize, Code.imageSize));
       	 	var fi = undefined;
		
		var names = Blockly.Arduino.InstanceTypeWithNames['Servo'];
		if (names){
			var newName = names[0][0];
		    fi = new Blockly.FieldInstance('Servo', newName, false, false, false);
			var len = fi.menuGenerator_.length;
			fi.menuGenerator_ = names.concat([fi.menuGenerator_[len-2],fi.menuGenerator_[len-1]]);
		}else{
			fi = new Blockly.FieldInstance('Servo', 'SERVOMOT', false, false, false);
			Blockly.Arduino.InstanceTypeWithNames['Servo'] = [];
			Blockly.Arduino.InstanceTypeWithNames['Servo'].push(['SERVOMOT','SERVOMOT']);
		}
	this.appendDummyInput("")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField(Blockly.Msg.SERVO_ATTACH2)
            .appendField(fi, 'SERVO_INSTANCE_NAME');
        this.appendDummyInput("DEGREE")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField(Blockly.Msg["SERVO_MOVE_DEGREE"])
            .appendField(new FieldSlider(90, 0, 180, 5), "DEGREE");
        this.setInputsInline(false);
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setTooltip(Blockly.Msg["SERVO_MOVE_TOOLTIP"]);
        this.setHelpUrl(Blockly.Msg["SERVO_MOVE_HELPURL"]);
        this.setStyle('servo_blocks');
    }
};

Blockly.Blocks['SERVO_READ_DEGREES'] = {
    init: function() {
        this.appendDummyInput()
            .appendField(Blockly.Msg["SERVO_READ_DEGREES_INPUT"])
            .appendField(new Blockly.FieldImage(servoMediaFolder + "servo.jpg", Code.imageSize, Code.imageSize));
        	var fi = undefined;
		
		var names = Blockly.Arduino.InstanceTypeWithNames['Servo'];
		if (names){
			var newName = names[0][0];
		    fi = new Blockly.FieldInstance('Servo', newName, false, false, false);
			var len = fi.menuGenerator_.length;
			fi.menuGenerator_ = names.concat([fi.menuGenerator_[len-2],fi.menuGenerator_[len-1]]);
		}else{
			fi = new Blockly.FieldInstance('Servo', 'SERVOMOT', false, false, false);
			Blockly.Arduino.InstanceTypeWithNames['Servo'] = [];
			Blockly.Arduino.InstanceTypeWithNames['Servo'].push(['SERVOMOT','SERVOMOT']);
		}
	this.appendDummyInput("")
            .setAlign(Blockly.ALIGN_RIGHT)
            .appendField(Blockly.Msg.SERVO_ATTACH2)
            .appendField(fi, 'SERVO_INSTANCE_NAME');
        this.setOutput(true, "Number");
        this.setTooltip(Blockly.Msg["SERVO_READ_DEGREES_TOOLTIP"]);
        this.setHelpUrl(Blockly.Msg["SERVO_READ_DEGREES_HELPURL"]);
        this.setStyle('servo_blocks');
    }
};